diff --git a/core/transmission/common/include/softbus_trans_def.h b/core/transmission/common/include/softbus_trans_def.h
index 21958e3bc..7e76dbd19 100644
--- a/core/transmission/common/include/softbus_trans_def.h
+++ b/core/transmission/common/include/softbus_trans_def.h
@@ -17,7 +17,8 @@
 #define SOFTBUS_TRANS_DEF_H
 
 #include <stdbool.h>
-#include "session.h"
+// #include "session.h"
+#include "trans_type.h"
 
 #ifdef __cplusplus
 extern "C" {
diff --git a/interfaces/kits/transport/session.h b/interfaces/kits/transport/session.h
index ad6cb916a..8c6f0a94a 100644
--- a/interfaces/kits/transport/session.h
+++ b/interfaces/kits/transport/session.h
@@ -51,427 +51,6 @@
 extern "C" {
 #endif
 
-/**
- * @brief Enumerates the session types.
- *
- * @since 1.0
- * @version 1.0
- */
-typedef enum {
-    TYPE_MESSAGE = 1,  /**< Message */
-    TYPE_BYTES,        /**< Bytes */
-    TYPE_FILE,         /**< File */
-    TYPE_STREAM,       /**< Stream */
-    TYPE_BUTT,
-} SessionType;
-
-/**
- * @brief Enumerates the stream types.
- *
- * @since 1.0
- * @version 1.0
- */
-typedef enum  {
-    INVALID = -1,         /**< Invalid stream type. */
-    RAW_STREAM,           /**< Send any segment of a frame each time. */
-    COMMON_VIDEO_STREAM,  /**< Send a whole video frame each time. */
-    COMMON_AUDIO_STREAM,  /**< Send a whole audio frame each time. */
-    VIDEO_SLICE_STREAM,   /**< Slice frame mode. */
-} StreamType;
-
-/**
- * @brief Enumerates the link types.
- *
- * @since 1.0
- * @version 1.0
- */
-typedef enum  {
-    LINK_TYPE_WIFI_WLAN_5G = 1, /**< 5 GHz Wi-Fi link */
-    LINK_TYPE_WIFI_WLAN_2G = 2,  /**< 2.4 GHz Wi-Fi link */
-    LINK_TYPE_WIFI_P2P = 3,      /**< P2P link */
-    LINK_TYPE_BR = 4,            /**< BR link */
-    LINK_TYPE_BLE = 5,
-    LINK_TYPE_WIFI_P2P_REUSE = 6,
-    LINK_TYPE_BLE_DIRECT = 7,
-    LINK_TYPE_COC = 8,
-    LINK_TYPE_COC_DIRECT = 9,
-    LINK_TYPE_MAX = 9,
-} LinkType;
-
-/**
- * @brief Defines the session attributes.
- *
- * @since 1.0
- * @version 1.0
- */
-typedef struct {
-    int dataType;                      /**< Session type {@link SessionType} */
-    int linkTypeNum;                   /**< Number of link types */
-    LinkType linkType[LINK_TYPE_MAX];  /**< Link type {@link LinkType} */
-    /**
-     * @brief Defines the attributes.
-     *
-     * @since 1.0
-     * @version 1.0
-     */
-    union {
-        /**
-         * @brief Defines the stream attributes.
-         *
-         * @since 1.0
-         * @version 1.0
-         */
-        struct StreamAttr {
-            int streamType; /**< Stream type {@link StreamType} */
-        } streamAttr;
-    } attr;
-    uint8_t *fastTransData;
-    uint16_t fastTransDataSize;
-} SessionAttribute;
-
-/**
- * @brief Enumerates the quality of service (QoS) types.
- *
- * @since 1.0
- * @version 1.0
- */
-typedef enum {
-    QOS_IMPROVE = 0,     /**< Improve QoS */
-    QOS_RECOVER = 1,     /**< Recover QoS */
-} QosQuality;
-
-/**
- * @brief Enumerates the QoS feedback types.
- *
- * @since 1.0
- * @version 1.0
- */
-typedef enum {
-    TRANS_STREAM_QUALITY_EVENT = 1,  /**< Feedback on stream transmission quality */
-    TRANS_CHANNEL_QUALITY_EVENT,     /**< Feedback on transmission channel quality */
-    TRANS_CAN_DELAY_EVENT,           /**< Feedback on deferrable transmission */
-    TRANS_CANT_DELAY_EVENT,          /**< Feedback on non-deferrable transmission */
-    QOS_EVENT_MAX                    /**< Invalid feedback */
-} QosEvent;
-
-/**
- * @brief Enumerates the stream transmission QoS event types.
- *
- * @since 1.0
- * @version 1.0
- */
-typedef enum {
-    WIFI_CHANNEL_QUALITY = 1,      /**< Wi-Fi channel quality */
-    FRAME_REALTIME_STATUS = 2,     /**< Real-time status of frame transmission */
-    BANDWIDTH_ESTIMATE_VALUE = 3,  /**< Bandwidth estimation */
-    JITTER_DETECTION_VALUE = 4,    /**< Jitter detection */
-    STREAM_TRAFFIC_STASTICS = 5,   /**< Stream traffic statistics */
-} TransEnumEventType;
-
-/**
- * @brief Defines the Wi-Fi channel quality.
- *
- * @since 1.0
- * @version 1.0
- */
-typedef struct {
-    int32_t channel;  /**< Wi-Fi channel */
-    int32_t score;    /**< Wi-Fi channel score */
-} WifiChannelQuality;
-
-/**
- * @brief Defines the frame information.
- *
- * @since 1.0
- * @version 1.0
- */
-typedef struct {
-    int32_t streamId;     /**< Stream ID */
-    int32_t seqNum;       /**< Sequence number of the frame */
-    int32_t level;        /**< Frame layer number */
-    int32_t transStatus;  /**< Frame status */
-    int32_t interval;     /**< Duration that unsent frames in the queue are cached */
-} FrameStatus;
-
-/**
- * @brief Defines the bandwidth detection information.
- *
- * @since 1.0
- * @version 1.0
- */
-typedef struct {
-    uint32_t trend;  /**< Bandwidth change trend */
-    uint32_t rate;   /**< Bandwidth rate */
-} BandwidthDetection;
-
-/**
- * @brief Defines the jitter estimation information.
- *
- * @since 1.0
- * @version 1.0
- */
-typedef struct {
-    int32_t jitterLevel;  /**< Estimated network status */
-    uint32_t bufferTime;  /**< Required buffer time */
-} JitterEstimation;
-
-/**
- * @brief Defines the stream transmission statistics information.
- *
- * @since 1.0
- * @version 1.0
- */
-typedef struct {
-    uint64_t statisticsGotTime;               /**< Time when the statistics information is obtained */
-    uint64_t periodRecvBits;                  /**< Number of bits received in a transmission period */
-    uint32_t pktNum;                          /**< Number of packets */
-    uint32_t periodRecvPkts;                  /**< Number of packets received in a transmission period */
-    uint32_t periodRecvPktLoss;               /**< Number of RX packets lost in a transmission period */
-    uint32_t periodRecvRate;                  /**< Receive rate in a transmission period, in kbit/s */
-    uint64_t periodRecvRateBps;               /**< RX rate in a transmission period, in bit/s */
-    uint32_t periodRtt;                       /**< Round-trip time (RTT), in ms */
-
-    /**< RX packet loss rate displayed for high precision.
-         For example, if the packet loss rate is 1.10%, the value is <b>110</b>. */
-    uint32_t periodRecvPktLossHighPrecision;
-    uint32_t periodSendLostPkts;              /**< Number of TX packets lost in a transmission period */
-    uint32_t periodSendPkts;                  /**< Number of packets sent in a transmission period */
-
-    /**< TX packet loss rate displayed for high precision.
-         For example, if the packet loss rate is 1.10%, the value is <b>110</b>. */
-    uint32_t periodSendPktLossHighPrecision;
-    uint64_t periodSendBits;                  /**< Number of bits sent in a transmission period */
-    uint64_t periodSendRateBps;               /**< TX rate in a transmission period, in bps */
-} StreamStatistics;
-
-/**
- * @brief Defines the video stream transmission QoS.
- *
- * @since 1.0
- * @version 1.0
- */
-typedef struct {
-    TransEnumEventType type;                 /**< Stream transmission QoS event type {@link TransEnumEventType} */
-    union {
-        WifiChannelQuality wifiChannelInfo;  /**< Wi-Fi channel quality {@link WifiChannelQuality} */
-        FrameStatus frameStatusInfo;         /**< Frame information {@link FrameStatus} */
-        BandwidthDetection bandwidthInfo;    /**< Bandwidth detection {@link BandwidthDetection} */
-        JitterEstimation jitterInfo;         /**< Network jitter estimation {@link JitterEstimation} */
-        StreamStatistics appStatistics;      /**< Stream transmission statistics {@link StreamStatistics} */
-    } info;
-} QosTv;
-
-typedef enum {
-    SESSION_OPTION_MAX_SENDBYTES_SIZE = 0,   /**< Value type of this option is uint32_t, this option only can be get */
-    SESSION_OPTION_MAX_SENDMESSAGE_SIZE,     /**< Value type of this option is uint32_t, this option only can be get */
-    SESSION_OPTION_LINK_TYPE,                /**< Value type of this option is int32_t, this option only can be get */
-
-    SESSION_OPTION_BUTT,
-} SessionOption;
-
-/**
- * @brief Defines session callbacks.
- *
- * When a session is opened or closed, or there is data to process, the related callback is invoked.
- *
- * @since 1.0
- * @version 1.0
- */
-typedef struct {
-    /**
-     * @brief Called when a session is opened.
-     *
-     * This callback is invoked to verify the session or initialize resources related to the session.
-     *
-     * @param sessionId Indicates the unique session ID.
-     * @param result Indicates the result to return.
-     * @return Returns <b>0</b> if the session is set up; returns a non-zero value
-     * otherwise. You do not need to call {@link CloseSession} to close the session.
-     * @since 1.0
-     * @version 1.0
-     */
-    int (*OnSessionOpened)(int sessionId, int result);
-
-    /**
-     * @brief Called when a session is closed.
-     *
-     * This callback is invoked to release resources related to the session.
-     * You do not need to call {@link CloseSession}.
-     *
-     * @param sessionId Indicates the unique session ID.
-     * @since 1.0
-     * @version 1.0
-     */
-    void (*OnSessionClosed)(int sessionId);
-
-    /**
-     * @brief Called when data is received.
-     *
-     * This callback is invoked to notify that data is received.
-     *
-     * @param sessionId Indicates the unique session ID.
-     * @param data Indicates the pointer to the data received.
-     * User-defined data type, users should apply for memory by themselves.
-     * @param dataLen Indicates the length of the data received.
-     * @since 1.0
-     * @version 1.0
-     */
-    void (*OnBytesReceived)(int sessionId, const void *data, unsigned int dataLen);
-
-    /**
-     * @brief Called when a message is received.
-     *
-     * This callback is invoked to notify that a message is received.
-     *
-     * @param sessionId Indicates the unique session ID.
-     * @param data Indicates the pointer to the message received.
-     * @param dataLen Indicates the length of the message received.
-     * @since 1.0
-     * @version 1.0
-     */
-    void (*OnMessageReceived)(int sessionId, const void *data, unsigned int dataLen);
-
-    /**
-     * @brief Called when stream data is received.
-     *
-     * This callback is invoked to notify that stream data is received.
-     *
-     * @param sessionId Indicates the unique session ID.
-     * @param data Indicates the pointer to the stream data received.
-     * @param ext Indicates the pointer to the extended service data received.
-     * @param param Indicates the pointer to the stream data frame information.
-     * @since 1.0
-     * @version 1.0
-     */
-    void (*OnStreamReceived)(int sessionId, const StreamData *data, const StreamData *ext,
-        const StreamFrameInfo *param);
-
-    /**
-     * @brief Called when QoS information is retrieved.
-     *
-     * This callback is invoked to notify that QoS information is retrieved.
-     *
-     * @param sessionId Indicates the unique session ID.
-     * @param eventId Indicates the type of QoS information, such as the channel quality and stream quality.
-     * @param tvCount Indicates the number of TVs returned in the fourth parameter <b>tvList</b>.
-     * @param tvList Indicates the pointer to the TV list.
-     * @since 1.0
-     * @version 1.0
-     */
-    void (*OnQosEvent)(int sessionId, int eventId, int tvCount, const QosTv *tvList);
-} ISessionListener;
-
-/**
- * @brief Defines the callbacks for file receiving.
- *
- * The callbacks are invoked to notify the file receiving status.
- *
- * @since 1.0
- * @version 1.0
- */
-typedef struct {
-    /**
-     * @brief Called when a file starts to be received.
-     *
-     * This callback is invoked to notify the start of file receiving.
-     *
-     * @param sessionId Indicates the unique session ID.
-     * @param files Indicates the pointer to the files to receive.
-     * @param fileCnt Indicates the number of files to receive.
-     * @return Returns <b>0</b> if the file receiving starts; returns a non-zero value otherwise.
-     * @since 1.0
-     * @version 1.0
-     */
-    int (*OnReceiveFileStarted)(int sessionId, const char *files, int fileCnt);
-
-    /**
-     * @brief Called when a file is being received.
-     *
-     * This callback is invoked to notify that a file is being received.
-     *
-     * @param sessionId Indicates the unique session ID.
-     * @param files Indicates the pointer to the first file received.
-     * @param bytesUpload Indicates the size of the files received.
-     * @param bytesTotal Indicates the total size of the files to receive, in bytes.
-     * @return Returns <b>0</b> if a file is being received; returns a non-zero value otherwise.
-     * @since 1.0
-     * @version 1.0
-     */
-    int (*OnReceiveFileProcess)(int sessionId, const char *firstFile, uint64_t bytesUpload, uint64_t bytesTotal);
-
-    /**
-     * @brief Called when the file receiving ends.
-     *
-     * This callback is invoked to notify the end of file receiving.
-     *
-     * @param sessionId Indicates the unique session ID.
-     * @param files Indicates the pointer to the files received.
-     * @param fileCnt Indicates the number of files received.
-     * @since 1.0
-     * @version 1.0
-     */
-    void (*OnReceiveFileFinished)(int sessionId, const char *files, int fileCnt);
-
-    /**
-     * @brief Called when an error occurs during the file receiving process.
-     *
-     * This callback is invoked to notify a file receiving error.
-     *
-     * @param sessionId Indicates the unique session ID.
-     * @since 1.0
-     * @version 1.0
-     */
-    void (*OnFileTransError)(int sessionId);
-} IFileReceiveListener;
-
-/**
- * @brief Defines callbacks for file sending.
- *
- * The callbacks are invoked to notify the file sending status.
- *
- * @since 1.0
- * @version 1.0
- */
-typedef struct {
-    /**
-     * @brief Called when a file is being sent.
-     *
-     * This callback is invoked to notify that a file is being sent.
-     *
-     * @param sessionId Indicates the unique session ID.
-     * @param bytesUpload Indicates the size of the file sent, in bytes.
-     * @param bytesTotal Indicates the total size of the file to send, in bytes.
-     * @return Returns <b>0</b> if the file is being sent; returns a non-zero value otherwise.
-     * @since 1.0
-     * @version 1.0
-     */
-    int (*OnSendFileProcess)(int sessionId, uint64_t bytesUpload, uint64_t bytesTotal);
-
-    /**
-     * @brief Called when the file sending ends.
-     *
-     * This callback is invoked to notify the end of file sending.
-     *
-     * @param sessionId Indicates the unique session ID.
-     * @param firstFile Indicates the pointer to the first file to send.
-     * @return Returns<b>0</b> if the file sending is complete; returns a non-zero value otherwise.
-     * @since 1.0
-     * @version 1.0
-     */
-    int (*OnSendFileFinished)(int sessionId, const char *firstFile);
-
-    /**
-     * @brief Called when an error occurs during the file sending process.
-     *
-     * This callback is invoked to notify a file sending error.
-     *
-     * @param sessionId Indicates the unique session ID.
-     * @since 1.0
-     * @version 1.0
-     */
-    void (*OnFileTransError)(int sessionId);
-} IFileSendListener;
-
 /**
  * @brief Creates a session server.
  *
diff --git a/interfaces/kits/transport/socket.h b/interfaces/kits/transport/socket.h
index b0fa10801..2cdf61e06 100644
--- a/interfaces/kits/transport/socket.h
+++ b/interfaces/kits/transport/socket.h
@@ -50,120 +50,6 @@
 extern "C" {
 #endif
 
-/**
- * @brief Enumerates the QoS feedback types.
- *
- * @since 2.0
- * @version 2.0
- */
-typedef enum {
-    QOS_SATISFIED,     /**< Feedback on satisfied quality */
-    QOS_NOT_SATISFIED, /**< Feedback on not satisfied quality */
-} QoSEvent;
-
-/**
- * @brief Defines socket callbacks.
- *
- * When a socket is opened or closed, or there is data to process, the related callback is invoked.
- *
- * @since 2.0
- * @version 2.0
- */
-typedef struct {
-    /**
-     * @brief Called when a socket is bind.
-     *
-     * This callback is invoked to verify the socket or initialize resources related to the socket.
-     * When the connection is successful, this callback be called on the server side.
-     * The server side refers to the side that called {@Listen} function.
-     *
-     * @param socket Indicates the unique socket fd.
-     * @param info Indicates the information of peer socket.
-     * @since 2.0
-     * @version 2.0
-     */
-    void (*OnBind)(int32_t socket, PeerSocketInfo info);
-
-    /**
-     * @brief Called when a socket is closed.
-     *
-     * This callback is invoked to release resources related to the socket.
-     *
-     * @param socket Indicates the unique socket fd.
-     * @param reason Indicates the reason for closing the socket.
-     * @since 2.0
-     * @version 2.0
-     */
-    void (*OnShutdown)(int32_t socket, ShutdownReason reason);
-
-    /**
-     * @brief Called when bytes data is received.
-     *
-     * This callback is invoked to notify that data is received.
-     *
-     * @param socket Indicates the unique socket fd.
-     * @param data Indicates the pointer to the bytes data received.
-     * @param dataLen Indicates the length of the bytes data received.
-     * @since 2.0
-     * @version 2.0
-     */
-    void (*OnBytes)(int32_t socket, const void *data, uint32_t dataLen);
-
-    /**
-     * @brief Called when message data is received.
-     *
-     * This callback is invoked to notify that message data is received.
-     *
-     * @param socket Indicates the unique socket fd.
-     * @param data Indicates the pointer to the message data received.
-     * @param dataLen Indicates the length of the message data received.
-     * @since 2.0
-     * @version 2.0
-     */
-    void (*OnMessage)(int32_t socket, const void *data, uint32_t dataLen);
-
-    /**
-     * @brief Called when stream data is received.
-     *
-     * This callback is invoked to notify that stream data is received.
-     *
-     * @param socket Indicates the unique socket fd.
-     * @param data Indicates the pointer to the stream data received.
-     * @param ext Indicates the pointer to the extended service data received.
-     * @param param Indicates the pointer to the stream data frame information.
-     * @since 2.0
-     * @version 2.0
-     */
-    void (*OnStream)(int32_t socket, const StreamData *data, const StreamData *ext, const StreamFrameInfo *param);
-
-    /**
-     * @brief Called when file data is received.
-     *
-     * This callback is invoked to notify that file data is received.
-     *
-     * @param socket Indicates the unique socket fd.
-     * @param event Indicates the file event.
-     * @param data Indicates the pointer to the file data received.
-     * @since 2.0
-     * @version 2.0
-     */
-    void (*OnFile)(int32_t socket, FileEvent *event);
-
-    /**
-     * @brief Called when QoS state is changed.
-     *
-     * This callback is invoked to notify that QoS state is changed.
-     *
-     * @param socket Indicates the unique socket fd.
-     * @param event Indicates the type of QoS state change.
-     * @param qos Indicates the QoS status that we can provide.
-     * @param qosCount Indicates the number of the third parameter <b>qos</b>.
-     * @since 2.0
-     * @version 2.0
-     */
-    void (*OnQos)(int32_t socket, QoSEvent eventId, const QosTV *qos, uint32_t qosCount);
-} ISocketListener;
-
 /**
  * @brief Creates a socket.
  *
diff --git a/interfaces/kits/transport/trans_type.h b/interfaces/kits/transport/trans_type.h
index b7e642ad9..2d6c7d935 100644
--- a/interfaces/kits/transport/trans_type.h
+++ b/interfaces/kits/transport/trans_type.h
@@ -196,6 +196,545 @@ typedef struct {
     char *buf;  /**< Pointer to the buffer for storing the stream data */
     int bufLen; /**< Length of the buffer */
 } StreamData;
+
+
+
+/**
+ * @brief Enumerates the session types.
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+typedef enum {
+    TYPE_MESSAGE = 1,  /**< Message */
+    TYPE_BYTES,        /**< Bytes */
+    TYPE_FILE,         /**< File */
+    TYPE_STREAM,       /**< Stream */
+    TYPE_BUTT,
+} SessionType;
+
+/**
+ * @brief Enumerates the stream types.
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+typedef enum  {
+    INVALID = -1,         /**< Invalid stream type. */
+    RAW_STREAM,           /**< Send any segment of a frame each time. */
+    COMMON_VIDEO_STREAM,  /**< Send a whole video frame each time. */
+    COMMON_AUDIO_STREAM,  /**< Send a whole audio frame each time. */
+    VIDEO_SLICE_STREAM,   /**< Slice frame mode. */
+} StreamType;
+
+/**
+ * @brief Enumerates the link types.
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+typedef enum  {
+    LINK_TYPE_WIFI_WLAN_5G = 1, /**< 5 GHz Wi-Fi link */
+    LINK_TYPE_WIFI_WLAN_2G = 2,  /**< 2.4 GHz Wi-Fi link */
+    LINK_TYPE_WIFI_P2P = 3,      /**< P2P link */
+    LINK_TYPE_BR = 4,            /**< BR link */
+    LINK_TYPE_BLE = 5,
+    LINK_TYPE_WIFI_P2P_REUSE = 6,
+    LINK_TYPE_BLE_DIRECT = 7,
+    LINK_TYPE_COC = 8,
+    LINK_TYPE_COC_DIRECT = 9,
+    LINK_TYPE_MAX = 9,
+} LinkType;
+
+/**
+ * @brief Defines the session attributes.
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+typedef struct {
+    int dataType;                      /**< Session type {@link SessionType} */
+    int linkTypeNum;                   /**< Number of link types */
+    LinkType linkType[LINK_TYPE_MAX];  /**< Link type {@link LinkType} */
+    /**
+     * @brief Defines the attributes.
+     *
+     * @since 1.0
+     * @version 1.0
+     */
+    union {
+        /**
+         * @brief Defines the stream attributes.
+         *
+         * @since 1.0
+         * @version 1.0
+         */
+        struct StreamAttr {
+            int streamType; /**< Stream type {@link StreamType} */
+        } streamAttr;
+    } attr;
+    uint8_t *fastTransData;
+    uint16_t fastTransDataSize;
+} SessionAttribute;
+
+/**
+ * @brief Enumerates the quality of service (QoS) types.
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+typedef enum {
+    QOS_IMPROVE = 0,     /**< Improve QoS */
+    QOS_RECOVER = 1,     /**< Recover QoS */
+} QosQuality;
+
+/**
+ * @brief Enumerates the QoS feedback types.
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+typedef enum {
+    TRANS_STREAM_QUALITY_EVENT = 1,  /**< Feedback on stream transmission quality */
+    TRANS_CHANNEL_QUALITY_EVENT,     /**< Feedback on transmission channel quality */
+    TRANS_CAN_DELAY_EVENT,           /**< Feedback on deferrable transmission */
+    TRANS_CANT_DELAY_EVENT,          /**< Feedback on non-deferrable transmission */
+    QOS_EVENT_MAX                    /**< Invalid feedback */
+} QosEvent;
+
+/**
+ * @brief Enumerates the stream transmission QoS event types.
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+typedef enum {
+    WIFI_CHANNEL_QUALITY = 1,      /**< Wi-Fi channel quality */
+    FRAME_REALTIME_STATUS = 2,     /**< Real-time status of frame transmission */
+    BANDWIDTH_ESTIMATE_VALUE = 3,  /**< Bandwidth estimation */
+    JITTER_DETECTION_VALUE = 4,    /**< Jitter detection */
+    STREAM_TRAFFIC_STASTICS = 5,   /**< Stream traffic statistics */
+} TransEnumEventType;
+
+/**
+ * @brief Defines the Wi-Fi channel quality.
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+typedef struct {
+    int32_t channel;  /**< Wi-Fi channel */
+    int32_t score;    /**< Wi-Fi channel score */
+} WifiChannelQuality;
+
+/**
+ * @brief Defines the frame information.
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+typedef struct {
+    int32_t streamId;     /**< Stream ID */
+    int32_t seqNum;       /**< Sequence number of the frame */
+    int32_t level;        /**< Frame layer number */
+    int32_t transStatus;  /**< Frame status */
+    int32_t interval;     /**< Duration that unsent frames in the queue are cached */
+} FrameStatus;
+
+/**
+ * @brief Defines the bandwidth detection information.
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+typedef struct {
+    uint32_t trend;  /**< Bandwidth change trend */
+    uint32_t rate;   /**< Bandwidth rate */
+} BandwidthDetection;
+
+/**
+ * @brief Defines the jitter estimation information.
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+typedef struct {
+    int32_t jitterLevel;  /**< Estimated network status */
+    uint32_t bufferTime;  /**< Required buffer time */
+} JitterEstimation;
+
+/**
+ * @brief Defines the stream transmission statistics information.
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+typedef struct {
+    uint64_t statisticsGotTime;               /**< Time when the statistics information is obtained */
+    uint64_t periodRecvBits;                  /**< Number of bits received in a transmission period */
+    uint32_t pktNum;                          /**< Number of packets */
+    uint32_t periodRecvPkts;                  /**< Number of packets received in a transmission period */
+    uint32_t periodRecvPktLoss;               /**< Number of RX packets lost in a transmission period */
+    uint32_t periodRecvRate;                  /**< Receive rate in a transmission period, in kbit/s */
+    uint64_t periodRecvRateBps;               /**< RX rate in a transmission period, in bit/s */
+    uint32_t periodRtt;                       /**< Round-trip time (RTT), in ms */
+
+    /**< RX packet loss rate displayed for high precision.
+         For example, if the packet loss rate is 1.10%, the value is <b>110</b>. */
+    uint32_t periodRecvPktLossHighPrecision;
+    uint32_t periodSendLostPkts;              /**< Number of TX packets lost in a transmission period */
+    uint32_t periodSendPkts;                  /**< Number of packets sent in a transmission period */
+
+    /**< TX packet loss rate displayed for high precision.
+         For example, if the packet loss rate is 1.10%, the value is <b>110</b>. */
+    uint32_t periodSendPktLossHighPrecision;
+    uint64_t periodSendBits;                  /**< Number of bits sent in a transmission period */
+    uint64_t periodSendRateBps;               /**< TX rate in a transmission period, in bps */
+} StreamStatistics;
+
+/**
+ * @brief Defines the video stream transmission QoS.
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+typedef struct {
+    TransEnumEventType type;                 /**< Stream transmission QoS event type {@link TransEnumEventType} */
+    union {
+        WifiChannelQuality wifiChannelInfo;  /**< Wi-Fi channel quality {@link WifiChannelQuality} */
+        FrameStatus frameStatusInfo;         /**< Frame information {@link FrameStatus} */
+        BandwidthDetection bandwidthInfo;    /**< Bandwidth detection {@link BandwidthDetection} */
+        JitterEstimation jitterInfo;         /**< Network jitter estimation {@link JitterEstimation} */
+        StreamStatistics appStatistics;      /**< Stream transmission statistics {@link StreamStatistics} */
+    } info;
+} QosTv;
+
+typedef enum {
+    SESSION_OPTION_MAX_SENDBYTES_SIZE = 0,   /**< Value type of this option is uint32_t, this option only can be get */
+    SESSION_OPTION_MAX_SENDMESSAGE_SIZE,     /**< Value type of this option is uint32_t, this option only can be get */
+    SESSION_OPTION_LINK_TYPE,                /**< Value type of this option is int32_t, this option only can be get */
+
+    SESSION_OPTION_BUTT,
+} SessionOption;
+
+/**
+ * @brief Defines session callbacks.
+ *
+ * When a session is opened or closed, or there is data to process, the related callback is invoked.
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+typedef struct {
+    /**
+     * @brief Called when a session is opened.
+     *
+     * This callback is invoked to verify the session or initialize resources related to the session.
+     *
+     * @param sessionId Indicates the unique session ID.
+     * @param result Indicates the result to return.
+     * @return Returns <b>0</b> if the session is set up; returns a non-zero value
+     * otherwise. You do not need to call {@link CloseSession} to close the session.
+     * @since 1.0
+     * @version 1.0
+     */
+    int (*OnSessionOpened)(int sessionId, int result);
+
+    /**
+     * @brief Called when a session is closed.
+     *
+     * This callback is invoked to release resources related to the session.
+     * You do not need to call {@link CloseSession}.
+     *
+     * @param sessionId Indicates the unique session ID.
+     * @since 1.0
+     * @version 1.0
+     */
+    void (*OnSessionClosed)(int sessionId);
+
+    /**
+     * @brief Called when data is received.
+     *
+     * This callback is invoked to notify that data is received.
+     *
+     * @param sessionId Indicates the unique session ID.
+     * @param data Indicates the pointer to the data received.
+     * User-defined data type, users should apply for memory by themselves.
+     * @param dataLen Indicates the length of the data received.
+     * @since 1.0
+     * @version 1.0
+     */
+    void (*OnBytesReceived)(int sessionId, const void *data, unsigned int dataLen);
+
+    /**
+     * @brief Called when a message is received.
+     *
+     * This callback is invoked to notify that a message is received.
+     *
+     * @param sessionId Indicates the unique session ID.
+     * @param data Indicates the pointer to the message received.
+     * @param dataLen Indicates the length of the message received.
+     * @since 1.0
+     * @version 1.0
+     */
+    void (*OnMessageReceived)(int sessionId, const void *data, unsigned int dataLen);
+
+    /**
+     * @brief Called when stream data is received.
+     *
+     * This callback is invoked to notify that stream data is received.
+     *
+     * @param sessionId Indicates the unique session ID.
+     * @param data Indicates the pointer to the stream data received.
+     * @param ext Indicates the pointer to the extended service data received.
+     * @param param Indicates the pointer to the stream data frame information.
+     * @since 1.0
+     * @version 1.0
+     */
+    void (*OnStreamReceived)(int sessionId, const StreamData *data, const StreamData *ext,
+        const StreamFrameInfo *param);
+
+    /**
+     * @brief Called when QoS information is retrieved.
+     *
+     * This callback is invoked to notify that QoS information is retrieved.
+     *
+     * @param sessionId Indicates the unique session ID.
+     * @param eventId Indicates the type of QoS information, such as the channel quality and stream quality.
+     * @param tvCount Indicates the number of TVs returned in the fourth parameter <b>tvList</b>.
+     * @param tvList Indicates the pointer to the TV list.
+     * @since 1.0
+     * @version 1.0
+     */
+    void (*OnQosEvent)(int sessionId, int eventId, int tvCount, const QosTv *tvList);
+} ISessionListener;
+
+/**
+ * @brief Defines the callbacks for file receiving.
+ *
+ * The callbacks are invoked to notify the file receiving status.
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+typedef struct {
+    /**
+     * @brief Called when a file starts to be received.
+     *
+     * This callback is invoked to notify the start of file receiving.
+     *
+     * @param sessionId Indicates the unique session ID.
+     * @param files Indicates the pointer to the files to receive.
+     * @param fileCnt Indicates the number of files to receive.
+     * @return Returns <b>0</b> if the file receiving starts; returns a non-zero value otherwise.
+     * @since 1.0
+     * @version 1.0
+     */
+    int (*OnReceiveFileStarted)(int sessionId, const char *files, int fileCnt);
+
+    /**
+     * @brief Called when a file is being received.
+     *
+     * This callback is invoked to notify that a file is being received.
+     *
+     * @param sessionId Indicates the unique session ID.
+     * @param files Indicates the pointer to the first file received.
+     * @param bytesUpload Indicates the size of the files received.
+     * @param bytesTotal Indicates the total size of the files to receive, in bytes.
+     * @return Returns <b>0</b> if a file is being received; returns a non-zero value otherwise.
+     * @since 1.0
+     * @version 1.0
+     */
+    int (*OnReceiveFileProcess)(int sessionId, const char *firstFile, uint64_t bytesUpload, uint64_t bytesTotal);
+
+    /**
+     * @brief Called when the file receiving ends.
+     *
+     * This callback is invoked to notify the end of file receiving.
+     *
+     * @param sessionId Indicates the unique session ID.
+     * @param files Indicates the pointer to the files received.
+     * @param fileCnt Indicates the number of files received.
+     * @since 1.0
+     * @version 1.0
+     */
+    void (*OnReceiveFileFinished)(int sessionId, const char *files, int fileCnt);
+
+    /**
+     * @brief Called when an error occurs during the file receiving process.
+     *
+     * This callback is invoked to notify a file receiving error.
+     *
+     * @param sessionId Indicates the unique session ID.
+     * @since 1.0
+     * @version 1.0
+     */
+    void (*OnFileTransError)(int sessionId);
+} IFileReceiveListener;
+
+/**
+ * @brief Defines callbacks for file sending.
+ *
+ * The callbacks are invoked to notify the file sending status.
+ *
+ * @since 1.0
+ * @version 1.0
+ */
+typedef struct {
+    /**
+     * @brief Called when a file is being sent.
+     *
+     * This callback is invoked to notify that a file is being sent.
+     *
+     * @param sessionId Indicates the unique session ID.
+     * @param bytesUpload Indicates the size of the file sent, in bytes.
+     * @param bytesTotal Indicates the total size of the file to send, in bytes.
+     * @return Returns <b>0</b> if the file is being sent; returns a non-zero value otherwise.
+     * @since 1.0
+     * @version 1.0
+     */
+    int (*OnSendFileProcess)(int sessionId, uint64_t bytesUpload, uint64_t bytesTotal);
+
+    /**
+     * @brief Called when the file sending ends.
+     *
+     * This callback is invoked to notify the end of file sending.
+     *
+     * @param sessionId Indicates the unique session ID.
+     * @param firstFile Indicates the pointer to the first file to send.
+     * @return Returns<b>0</b> if the file sending is complete; returns a non-zero value otherwise.
+     * @since 1.0
+     * @version 1.0
+     */
+    int (*OnSendFileFinished)(int sessionId, const char *firstFile);
+
+    /**
+     * @brief Called when an error occurs during the file sending process.
+     *
+     * This callback is invoked to notify a file sending error.
+     *
+     * @param sessionId Indicates the unique session ID.
+     * @since 1.0
+     * @version 1.0
+     */
+    void (*OnFileTransError)(int sessionId);
+} IFileSendListener;
+
+
+/**
+ * @brief Enumerates the QoS feedback types.
+ *
+ * @since 2.0
+ * @version 2.0
+ */
+typedef enum {
+    QOS_SATISFIED,     /**< Feedback on satisfied quality */
+    QOS_NOT_SATISFIED, /**< Feedback on not satisfied quality */
+} QoSEvent;
+
+/**
+ * @brief Defines socket callbacks.
+ *
+ * When a socket is opened or closed, or there is data to process, the related callback is invoked.
+ *
+ * @since 2.0
+ * @version 2.0
+ */
+typedef struct {
+    /**
+     * @brief Called when a socket is bind.
+     *
+     * This callback is invoked to verify the socket or initialize resources related to the socket.
+     * When the connection is successful, this callback be called on the server side.
+     * The server side refers to the side that called {@Listen} function.
+     *
+     * @param socket Indicates the unique socket fd.
+     * @param info Indicates the information of peer socket.
+     * @since 2.0
+     * @version 2.0
+     */
+    void (*OnBind)(int32_t socket, PeerSocketInfo info);
+
+    /**
+     * @brief Called when a socket is closed.
+     *
+     * This callback is invoked to release resources related to the socket.
+     *
+     * @param socket Indicates the unique socket fd.
+     * @param reason Indicates the reason for closing the socket.
+     * @since 2.0
+     * @version 2.0
+     */
+    void (*OnShutdown)(int32_t socket, ShutdownReason reason);
+
+    /**
+     * @brief Called when bytes data is received.
+     *
+     * This callback is invoked to notify that data is received.
+     *
+     * @param socket Indicates the unique socket fd.
+     * @param data Indicates the pointer to the bytes data received.
+     * @param dataLen Indicates the length of the bytes data received.
+     * @since 2.0
+     * @version 2.0
+     */
+    void (*OnBytes)(int32_t socket, const void *data, uint32_t dataLen);
+
+    /**
+     * @brief Called when message data is received.
+     *
+     * This callback is invoked to notify that message data is received.
+     *
+     * @param socket Indicates the unique socket fd.
+     * @param data Indicates the pointer to the message data received.
+     * @param dataLen Indicates the length of the message data received.
+     * @since 2.0
+     * @version 2.0
+     */
+    void (*OnMessage)(int32_t socket, const void *data, uint32_t dataLen);
+
+    /**
+     * @brief Called when stream data is received.
+     *
+     * This callback is invoked to notify that stream data is received.
+     *
+     * @param socket Indicates the unique socket fd.
+     * @param data Indicates the pointer to the stream data received.
+     * @param ext Indicates the pointer to the extended service data received.
+     * @param param Indicates the pointer to the stream data frame information.
+     * @since 2.0
+     * @version 2.0
+     */
+    void (*OnStream)(int32_t socket, const StreamData *data, const StreamData *ext, const StreamFrameInfo *param);
+
+    /**
+     * @brief Called when file data is received.
+     *
+     * This callback is invoked to notify that file data is received.
+     *
+     * @param socket Indicates the unique socket fd.
+     * @param event Indicates the file event.
+     * @param data Indicates the pointer to the file data received.
+     * @since 2.0
+     * @version 2.0
+     */
+    void (*OnFile)(int32_t socket, FileEvent *event);
+
+    /**
+     * @brief Called when QoS state is changed.
+     *
+     * This callback is invoked to notify that QoS state is changed.
+     *
+     * @param socket Indicates the unique socket fd.
+     * @param event Indicates the type of QoS state change.
+     * @param qos Indicates the QoS status that we can provide.
+     * @param qosCount Indicates the number of the third parameter <b>qos</b>.
+     * @since 2.0
+     * @version 2.0
+     */
+    void (*OnQos)(int32_t socket, QoSEvent eventId, const QosTV *qos, uint32_t qosCount);
+} ISocketListener;
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/sdk/transmission/session/include/client_trans_message_service.h b/sdk/transmission/session/include/client_trans_message_service.h
index a8e455eb7..12e7943ab 100644
--- a/sdk/transmission/session/include/client_trans_message_service.h
+++ b/sdk/transmission/session/include/client_trans_message_service.h
@@ -16,7 +16,7 @@
 #ifndef CLIENT_TRANS_MESSAGE_SERVICE_H
 #define CLIENT_TRANS_MESSAGE_SERVICE_H
 
-#include "session.h"
+// #include "session.h"
 
 #ifdef __cplusplus
 extern "C" {
diff --git a/sdk/transmission/session/include/client_trans_session_adapter.h b/sdk/transmission/session/include/client_trans_session_adapter.h
index d87595faf..a429dd6d6 100644
--- a/sdk/transmission/session/include/client_trans_session_adapter.h
+++ b/sdk/transmission/session/include/client_trans_session_adapter.h
@@ -17,17 +17,18 @@
 #define CLIENT_TRANS_SESSION_ADAPTER_H
 
 #include <stdint.h>
-#include "socket.h"
+// #include "socket.h"
+#include "trans_type.h"
 
 #ifdef __cplusplus
 extern "C" {
 #endif
-int32_t CreateSocket(const char *pkgName, const char *sessionName);
-int32_t ClientAddSocket(const SocketInfo *info, int32_t *sessionId);
-int32_t ClientListen(int32_t socket, const QosTV qos[], uint32_t qosCount, const ISocketListener *listener);
-int32_t ClientBind(int32_t socket, const QosTV qos[], uint32_t qosCount, const ISocketListener *listener);
-void ClientShutdown(int32_t socket);
-int32_t GetSocketMtuSize(int32_t socket, uint32_t *mtuSize);
+// int32_t CreateSocket(const char *pkgName, const char *sessionName);
+// int32_t ClientAddSocket(const SocketInfo *info, int32_t *sessionId);
+// int32_t ClientListen(int32_t socket, const QosTV qos[], uint32_t qosCount, const ISocketListener *listener);
+// int32_t ClientBind(int32_t socket, const QosTV qos[], uint32_t qosCount, const ISocketListener *listener);
+// void ClientShutdown(int32_t socket);
+// int32_t GetSocketMtuSize(int32_t socket, uint32_t *mtuSize);
 #ifdef __cplusplus
 }
 #endif
diff --git a/sdk/transmission/session/include/client_trans_session_callback.h b/sdk/transmission/session/include/client_trans_session_callback.h
index d55e87b2c..9ac62bc14 100644
--- a/sdk/transmission/session/include/client_trans_session_callback.h
+++ b/sdk/transmission/session/include/client_trans_session_callback.h
@@ -16,7 +16,8 @@
 #ifndef CLIENT_TRANS_SESSION_CALLBACK_H
 #define CLIENT_TRANS_SESSION_CALLBACK_H
 
-#include "session.h"
+// #include "session.h"
+#include "trans_type.h"
 #include "softbus_def.h"
 
 #ifdef __cplusplus
diff --git a/sdk/transmission/session/include/client_trans_session_manager.h b/sdk/transmission/session/include/client_trans_session_manager.h
index 9415c391f..bfd49c456 100644
--- a/sdk/transmission/session/include/client_trans_session_manager.h
+++ b/sdk/transmission/session/include/client_trans_session_manager.h
@@ -16,8 +16,8 @@
 #ifndef CLIENT_TRANS_SESSION_MANAGER_H
 #define CLIENT_TRANS_SESSION_MANAGER_H
 
-#include "session.h"
-#include "socket.h"
+// #include "session.h"
+// #include "socket.h"
 #include "softbus_def.h"
 #include "softbus_trans_def.h"
 #include "client_trans_session_adapter.h"
diff --git a/sdk/transmission/trans_channel/manager/include/client_trans_channel_manager.h b/sdk/transmission/trans_channel/manager/include/client_trans_channel_manager.h
index f534e09b5..b7455bc9a 100644
--- a/sdk/transmission/trans_channel/manager/include/client_trans_channel_manager.h
+++ b/sdk/transmission/trans_channel/manager/include/client_trans_channel_manager.h
@@ -16,7 +16,8 @@
 #ifndef CLIENT_TRANS_CHANNEL_MANAGER_H
 #define CLIENT_TRANS_CHANNEL_MANAGER_H
 
-#include "session.h"
+// #include "session.h"
+#include "trans_type.h"
 #include "softbus_def.h"
 
 #ifdef __cplusplus
