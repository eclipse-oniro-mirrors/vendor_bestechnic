From a3fc9c001ebf702cff66be7ee2f8955b309d6ad6 Mon Sep 17 00:00:00 2001
From: yangjian <jianyang@bestechnic.com>
Date: Sun, 9 Jan 2022 18:02:42 +0800
Subject: [PATCH] third_party/musl/

Signed-off-by: yangjian <jianyang@bestechnic.com>
Change-Id: Ia36e38cc61a63c9bf7437477e913675623389058
---
 porting/liteos_m/kernel/BUILD.gn              | 25 +++---
 porting/liteos_m/kernel/include/ctype.h       | 12 +++
 porting/liteos_m/kernel/include/stddef.h      | 13 +++
 porting/liteos_m/kernel/include/stdlib.h      |  2 +
 .../liteos_m/kernel/src/internal/stdio_impl.h |  5 ++
 porting/liteos_m/kernel/src/misc/realpath.c   | 85 +++++++++++++++++++
 porting/liteos_m/kernel/src/stdio/clearerr.c  |  9 +-
 porting/liteos_m/kernel/src/stdio/fclose.c    |  2 +-
 porting/liteos_m/kernel/src/stdio/feof.c      | 11 ++-
 porting/liteos_m/kernel/src/stdio/fflush.c    |  2 +-
 porting/liteos_m/kernel/src/stdio/fgets.c     |  4 +-
 porting/liteos_m/kernel/src/stdio/fileno.c    |  4 +-
 porting/liteos_m/kernel/src/stdio/fopen.c     |  9 +-
 porting/liteos_m/kernel/src/stdio/fputs.c     |  9 +-
 porting/liteos_m/kernel/src/stdio/fread.c     | 11 ++-
 porting/liteos_m/kernel/src/stdio/fseek.c     |  2 +-
 porting/liteos_m/kernel/src/stdio/ftell.c     |  2 +-
 porting/liteos_m/kernel/src/stdio/fwrite.c    |  9 +-
 porting/liteos_m/kernel/src/string/strdup.c   |  7 +-
 19 files changed, 188 insertions(+), 35 deletions(-)
 create mode 100644 porting/liteos_m/kernel/src/misc/realpath.c

diff --git a/porting/liteos_m/kernel/BUILD.gn b/porting/liteos_m/kernel/BUILD.gn
index 664f9493..08c45be1 100644
--- a/porting/liteos_m/kernel/BUILD.gn
+++ b/porting/liteos_m/kernel/BUILD.gn
@@ -58,10 +58,11 @@ static_library(libc) {
     "src/locale/c_locale.c",
     "src/locale/langinfo.c",
     "src/misc/dirname.c",
-    "src/multibyte/internal.c",
-    "src/multibyte/mbtowc.c",
-    "src/multibyte/wcrtomb.c",
-    "src/multibyte/wctomb.c",
+    "src/misc/realpath.c",
+    # "src/multibyte/internal.c",
+    # "src/multibyte/mbtowc.c",
+    # "src/multibyte/wcrtomb.c",
+    # "src/multibyte/wctomb.c",
     "src/network/h_errno.c",
     "src/network/htonl.c",
     "src/network/htons.c",
@@ -102,25 +103,25 @@ static_library(libc) {
     "src/stdio/perror.c",
     "src/stdio/remove.c",
     "src/stdio/rewind.c",
-    "src/stdio/snprintf.c",
+    # "src/stdio/snprintf.c",
     "src/stdio/stderr.c",
     "src/stdio/stdin.c",
     "src/stdio/stdout.c",
-    "src/stdio/vfprintf.c",
-    "src/stdio/vsnprintf.c",
-    "src/stdio/vsprintf.c",
+    # "src/stdio/vfprintf.c",
+    # "src/stdio/vsnprintf.c",
+    # "src/stdio/vsprintf.c",
     "src/stdlib/abs.c",
     "src/stdlib/atof.c",
     "src/stdlib/atoi.c",
 
-    #"src/stdlib/strtol.c",
+    # "src/stdlib/strtol.c",
     "src/locale/iconv.c",
-    "src/stdio/ungetc.c",
+    # "src/stdio/ungetc.c",
     "src/stdlib/atol.c",
     "src/stdlib/atoll.c",
     "src/stdlib/bsearch.c",
     "src/stdlib/llabs.c",
-    "src/stdlib/strtod.c",
+    # "src/stdlib/strtod.c",
     "src/string/memchr.c",
     "src/string/memcmp.c",
     "src/string/memcpy.c",
@@ -138,7 +139,7 @@ static_library(libc) {
     "src/string/strlen.c",
     "src/string/strncasecmp.c",
     "src/string/strncmp.c",
-    "src/string/strncpy.c",
+    # "src/string/strncpy.c",
     "src/string/strnlen.c",
     "src/string/strrchr.c",
     "src/string/strspn.c",
diff --git a/porting/liteos_m/kernel/include/ctype.h b/porting/liteos_m/kernel/include/ctype.h
index 61e826d0..05fe3b58 100644
--- a/porting/liteos_m/kernel/include/ctype.h
+++ b/porting/liteos_m/kernel/include/ctype.h
@@ -66,6 +66,18 @@ int   toupper_l(int, locale_t);
 
 int   isascii(int);
 int   toascii(int);
+
+#ifndef _U
+#define	_U	01
+#define	_L	02
+#define	_N	04
+#define	_S	010
+#define _P	020
+#define _C	040
+#define _X	0100
+#define	_B	0200
+#endif
+
 #define _tolower(a) ((a)|0x20)
 #define _toupper(a) ((a)&0x5f)
 #define isascii(a) (0 ? isascii(a) : (unsigned)(a) < 128)
diff --git a/porting/liteos_m/kernel/include/stddef.h b/porting/liteos_m/kernel/include/stddef.h
index 27b5a9ad..dbc7b64e 100644
--- a/porting/liteos_m/kernel/include/stddef.h
+++ b/porting/liteos_m/kernel/include/stddef.h
@@ -17,9 +17,22 @@
 #if __STDC_VERSION__ >= 201112L || __cplusplus >= 201103L
 #define __NEED_max_align_t
 #endif
+#define __need_wint_t
 
 #include <bits/alltypes.h>
 
+#if defined (__need_wint_t)
+#ifndef _WINT_T
+#define _WINT_T
+
+#ifndef __WINT_TYPE__
+#define __WINT_TYPE__ unsigned int
+#endif
+typedef __WINT_TYPE__ wint_t;
+#endif
+#undef __need_wint_t
+#endif
+
 #if __GNUC__ > 3
 #define offsetof(type, member) __builtin_offsetof(type, member)
 #else
diff --git a/porting/liteos_m/kernel/include/stdlib.h b/porting/liteos_m/kernel/include/stdlib.h
index d292fb0a..e665d446 100644
--- a/porting/liteos_m/kernel/include/stdlib.h
+++ b/porting/liteos_m/kernel/include/stdlib.h
@@ -63,6 +63,7 @@ int abs (int);
 long labs (long);
 long long llabs (long long);
 
+#ifndef __GNUC__
 typedef struct { int quot, rem; } div_t;
 typedef struct { long quot, rem; } ldiv_t;
 typedef struct { long long quot, rem; } lldiv_t;
@@ -70,6 +71,7 @@ typedef struct { long long quot, rem; } lldiv_t;
 div_t div (int, int);
 ldiv_t ldiv (long, long);
 lldiv_t lldiv (long long, long long);
+#endif
 
 int mblen (const char *, size_t);
 int mbtowc (wchar_t *__restrict, const char *__restrict, size_t);
diff --git a/porting/liteos_m/kernel/src/internal/stdio_impl.h b/porting/liteos_m/kernel/src/internal/stdio_impl.h
index fa94606a..d5f8598c 100644
--- a/porting/liteos_m/kernel/src/internal/stdio_impl.h
+++ b/porting/liteos_m/kernel/src/internal/stdio_impl.h
@@ -6,6 +6,11 @@
 #include <stdio.h>
 #include <bits/alltypes.h>
 #include "../include/features.h"
+#ifdef __GNUC__
+#define WRAP(x) __wrap_##x
+#else
+#define WRAP(x) x
+#endif
 
 #define UNGET 8
 
diff --git a/porting/liteos_m/kernel/src/misc/realpath.c b/porting/liteos_m/kernel/src/misc/realpath.c
new file mode 100644
index 00000000..3a916b8b
--- /dev/null
+++ b/porting/liteos_m/kernel/src/misc/realpath.c
@@ -0,0 +1,85 @@
+/*
+ * Copyright (c) 2013-2019 Huawei Technologies Co., Ltd. All rights reserved.
+ * Copyright (c) 2020-2021 Huawei Device Co., Ltd. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this list of
+ *    conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list
+ *    of conditions and the following disclaimer in the documentation and/or other materials
+ *    provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used
+ *    to endorse or promote products derived from this software without specific prior written
+ *    permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+ * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+ * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+#include <limits.h>
+#include <errno.h>
+#include <sys/stat.h>
+
+/*
+ * LiteOS-M file system uses abs path
+ */
+
+static unsigned int vfs_strnlen(const char *str, size_t maxlen)
+{
+    const char *p = NULL;
+
+    for (p = str; ((maxlen-- != 0) && (*p != '\0')); ++p) {}
+
+    return p - str;
+}
+
+char *realpath(const char *__restrict path, char *__restrict resolved_path)
+{
+    int namelen;
+    int res;
+    struct stat st;
+
+    if (!*path) {
+        errno = ENOENT;
+        return NULL;
+    }
+
+    namelen = vfs_strnlen(path, PATH_MAX);
+    if (!namelen) {
+        errno = EINVAL;
+        return NULL;
+    } else if (namelen >= PATH_MAX) {
+        errno = ENAMETOOLONG;
+        return NULL;
+    }
+
+    // LiteOS-M file system uses abs path, so we just stat path and strcpy it.
+    if (stat(path, &st) < 0) {
+        errno = ENOENT;
+        return NULL;
+    }
+
+    res = strcpy_s(resolved_path, PATH_MAX, path);
+    if (res != 0) {
+        errno = EINVAL;
+        return NULL;
+    } else {
+        return resolved_path;
+    }
+}
diff --git a/porting/liteos_m/kernel/src/stdio/clearerr.c b/porting/liteos_m/kernel/src/stdio/clearerr.c
index 3bf94d30..aaaaf83f 100644
--- a/porting/liteos_m/kernel/src/stdio/clearerr.c
+++ b/porting/liteos_m/kernel/src/stdio/clearerr.c
@@ -1,10 +1,15 @@
 #include "stdio_impl.h"
 
-void clearerr(FILE *f)
+void __clearerr(FILE *f)
 {
 	FLOCK(f);
 	f->flags &= ~(F_EOF|F_ERR);
 	FUNLOCK(f);
 }
 
-weak_alias(clearerr, clearerr_unlocked);
+weak_alias(__clearerr, clearerr_unlocked);
+
+void WRAP(clearerr)(FILE *f)
+{
+	__clearerr(f);
+}
diff --git a/porting/liteos_m/kernel/src/stdio/fclose.c b/porting/liteos_m/kernel/src/stdio/fclose.c
index 9569c8ff..d6dfcadd 100644
--- a/porting/liteos_m/kernel/src/stdio/fclose.c
+++ b/porting/liteos_m/kernel/src/stdio/fclose.c
@@ -38,7 +38,7 @@ int __fclose(FILE *f)
 }
 weak_alias(__fclose, fclose);
 
-int __wrap_fclose(FILE *f)
+int WRAP(fclose)(FILE *f)
 {
     return __fclose(f);
 }
diff --git a/porting/liteos_m/kernel/src/stdio/feof.c b/porting/liteos_m/kernel/src/stdio/feof.c
index 56da6b91..fafaeb15 100644
--- a/porting/liteos_m/kernel/src/stdio/feof.c
+++ b/porting/liteos_m/kernel/src/stdio/feof.c
@@ -2,7 +2,7 @@
 
 #undef feof
 
-int feof(FILE *f)
+int __feof(FILE *f)
 {
 	FLOCK(f);
 	int ret = !!(f->flags & F_EOF);
@@ -10,5 +10,10 @@ int feof(FILE *f)
 	return ret;
 }
 
-weak_alias(feof, feof_unlocked);
-weak_alias(feof, _IO_feof_unlocked);
+weak_alias(__feof, feof_unlocked);
+weak_alias(__feof, _IO_feof_unlocked);
+
+int WRAP(feof)(FILE *f)
+{
+	return __feof(f);
+}
diff --git a/porting/liteos_m/kernel/src/stdio/fflush.c b/porting/liteos_m/kernel/src/stdio/fflush.c
index f2164eec..71999bc0 100644
--- a/porting/liteos_m/kernel/src/stdio/fflush.c
+++ b/porting/liteos_m/kernel/src/stdio/fflush.c
@@ -47,7 +47,7 @@ int __fflush(FILE *f)
 weak_alias(fflush, fflush_unlocked);
 weak_alias(__fflush, fflush);
 
-int __wrap_fflush(FILE *f)
+int WRAP(fflush)(FILE *f)
 {
     return __fflush(f);
 }
diff --git a/porting/liteos_m/kernel/src/stdio/fgets.c b/porting/liteos_m/kernel/src/stdio/fgets.c
index d1109e75..26ef2b27 100644
--- a/porting/liteos_m/kernel/src/stdio/fgets.c
+++ b/porting/liteos_m/kernel/src/stdio/fgets.c
@@ -3,7 +3,7 @@
 
 #define MIN(a,b) ((a)<(b) ? (a) : (b))
 
-char *fgets(char *restrict s, int n, FILE *restrict f)
+char *WRAP(fgets)(char *restrict s, int n, FILE *restrict f)
 {
 	char *p = s;
 	unsigned char *z;
@@ -43,4 +43,4 @@ char *fgets(char *restrict s, int n, FILE *restrict f)
 	FUNLOCK(f);
 
 	return s;
-}
\ No newline at end of file
+}
diff --git a/porting/liteos_m/kernel/src/stdio/fileno.c b/porting/liteos_m/kernel/src/stdio/fileno.c
index e6e66908..5dee4215 100644
--- a/porting/liteos_m/kernel/src/stdio/fileno.c
+++ b/porting/liteos_m/kernel/src/stdio/fileno.c
@@ -1,7 +1,7 @@
 #include "stdio_impl.h"
 #include <errno.h>
 
-int fileno(FILE *f)
+int WRAP(fileno)(FILE *f)
 {
 	FLOCK(f);
 	int fd = f->fd;
@@ -11,4 +11,4 @@ int fileno(FILE *f)
 		return -1;
 	}
 	return fd;
-}
\ No newline at end of file
+}
diff --git a/porting/liteos_m/kernel/src/stdio/fopen.c b/porting/liteos_m/kernel/src/stdio/fopen.c
index 56086846..c204270a 100644
--- a/porting/liteos_m/kernel/src/stdio/fopen.c
+++ b/porting/liteos_m/kernel/src/stdio/fopen.c
@@ -5,7 +5,7 @@
 #include <errno.h>
 #include <limits.h>
 
-FILE *fopen(const char *restrict filename, const char *restrict mode)
+FILE *__fopen(const char *restrict filename, const char *restrict mode)
 {
 	FILE *f;
 	int fd;
@@ -39,4 +39,9 @@ FILE *fopen(const char *restrict filename, const char *restrict mode)
 	return 0;
 }
 
-weak_alias(fopen, fopen64);
+weak_alias(__fopen, fopen64);
+
+FILE *WRAP(fopen)(const char *restrict filename, const char *restrict mode)
+{
+	return __fopen(filename, mode);
+}
diff --git a/porting/liteos_m/kernel/src/stdio/fputs.c b/porting/liteos_m/kernel/src/stdio/fputs.c
index 1cf344f2..50b6efd4 100644
--- a/porting/liteos_m/kernel/src/stdio/fputs.c
+++ b/porting/liteos_m/kernel/src/stdio/fputs.c
@@ -1,10 +1,15 @@
 #include "stdio_impl.h"
 #include <string.h>
 
-int fputs(const char *restrict s, FILE *restrict f)
+int __fputs(const char *restrict s, FILE *restrict f)
 {
 	size_t l = strlen(s);
 	return (fwrite(s, 1, l, f)==l) - 1;
 }
 
-weak_alias(fputs, fputs_unlocked);
+weak_alias(__fputs, fputs_unlocked);
+
+int WRAP(fputs)(const char *restrict s, FILE *restrict f)
+{
+	return __fputs(s, f);
+}
diff --git a/porting/liteos_m/kernel/src/stdio/fread.c b/porting/liteos_m/kernel/src/stdio/fread.c
index a2116da6..858931a0 100644
--- a/porting/liteos_m/kernel/src/stdio/fread.c
+++ b/porting/liteos_m/kernel/src/stdio/fread.c
@@ -3,12 +3,12 @@
 
 #define MIN(a,b) ((a)<(b) ? (a) : (b))
 
-size_t fread(void *restrict destv, size_t size, size_t nmemb, FILE *restrict f)
+size_t __fread(void *restrict destv, size_t size, size_t nmemb, FILE *restrict f)
 {
 	unsigned char *dest = destv;
 	size_t len = size*nmemb, l = len, k;
 	if (!size) nmemb = 0;
-
+	if (!nmemb) return 0;
 	FLOCK(f);
 
 	f->mode |= f->mode-1;
@@ -35,4 +35,9 @@ size_t fread(void *restrict destv, size_t size, size_t nmemb, FILE *restrict f)
 	return nmemb;
 }
 
-weak_alias(fread, fread_unlocked);
+weak_alias(__fread, fread_unlocked);
+
+size_t WRAP(fread)(void *restrict destv, size_t size, size_t nmemb, FILE *restrict f)
+{
+	return __fread(destv, size, nmemb, f);
+}
diff --git a/porting/liteos_m/kernel/src/stdio/fseek.c b/porting/liteos_m/kernel/src/stdio/fseek.c
index 4731d8a0..0f10c2f6 100644
--- a/porting/liteos_m/kernel/src/stdio/fseek.c
+++ b/porting/liteos_m/kernel/src/stdio/fseek.c
@@ -33,7 +33,7 @@ int __fseeko(FILE *f, off_t off, int whence)
 	return result;
 }
 
-int fseek(FILE *f, long off, int whence)
+int WRAP(fseek)(FILE *f, long off, int whence)
 {
 	return __fseeko(f, off, whence);
 }
diff --git a/porting/liteos_m/kernel/src/stdio/ftell.c b/porting/liteos_m/kernel/src/stdio/ftell.c
index d15cc665..d899dcfd 100644
--- a/porting/liteos_m/kernel/src/stdio/ftell.c
+++ b/porting/liteos_m/kernel/src/stdio/ftell.c
@@ -26,7 +26,7 @@ off_t __ftello(FILE *f)
 	return pos;
 }
 
-long ftell(FILE *f)
+long WRAP(ftell)(FILE *f)
 {
 	off_t pos = __ftello(f);
 	if (pos > LONG_MAX) {
diff --git a/porting/liteos_m/kernel/src/stdio/fwrite.c b/porting/liteos_m/kernel/src/stdio/fwrite.c
index 7a567b2c..5e3fb264 100644
--- a/porting/liteos_m/kernel/src/stdio/fwrite.c
+++ b/porting/liteos_m/kernel/src/stdio/fwrite.c
@@ -25,7 +25,7 @@ size_t __fwritex(const unsigned char *restrict s, size_t l, FILE *restrict f)
 	return l+i;
 }
 
-size_t fwrite(const void *restrict src, size_t size, size_t nmemb, FILE *restrict f)
+size_t __fwrite(const void *restrict src, size_t size, size_t nmemb, FILE *restrict f)
 {
 	size_t k, l = size*nmemb;
 	if (!size) nmemb = 0;
@@ -35,4 +35,9 @@ size_t fwrite(const void *restrict src, size_t size, size_t nmemb, FILE *restric
 	return k==l ? nmemb : k/size;
 }
 
-weak_alias(fwrite, fwrite_unlocked);
+weak_alias(__fwrite, fwrite_unlocked);
+
+size_t WRAP(fwrite)(const void *restrict src, size_t size, size_t nmemb, FILE *restrict f)
+{
+	return __fwrite(src, size, nmemb, f);
+}
diff --git a/porting/liteos_m/kernel/src/string/strdup.c b/porting/liteos_m/kernel/src/string/strdup.c
index d4c27449..68682c8a 100644
--- a/porting/liteos_m/kernel/src/string/strdup.c
+++ b/porting/liteos_m/kernel/src/string/strdup.c
@@ -1,7 +1,12 @@
 #include <stdlib.h>
 #include <string.h>
 
-char *strdup(const char *s)
+#ifdef __GNUC__
+#define WRAP(x) __wrap_##x
+#else
+#define WRAP(x) x
+#endif
+char *WRAP(strdup)(const char *s)
 {
 	size_t l = strlen(s);
 	char *d = malloc(l+1);
-- 
2.17.1

