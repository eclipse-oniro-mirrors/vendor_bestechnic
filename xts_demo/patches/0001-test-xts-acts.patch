From 86aeb6dcbaac3330358f17599c4fe345f02360b1 Mon Sep 17 00:00:00 2001
From: yangjian <jianyang@bestechnic.com>
Date: Wed, 29 Dec 2021 15:39:49 +0800
Subject: [PATCH] test/xts/acts

Signed-off-by: yangjian <jianyang@bestechnic.com>
Change-Id: I909bc9a13ddb69d0f86eaf724772f9d7e5d19f4e
---
 hiviewdfx_lite/hilog_hal/src/dfx_hilog.c      |   2 +-
 .../huks/common/hks_test_file_operator.c      | 107 +++++++++++++++++-
 .../hks_safe_compare_key_test.c               |   2 +-
 utils_lite/kv_store_hal/BUILD.gn              |   6 +
 .../kv_store_hal/src/kvstore_func_test.c      |   5 +
 5 files changed, 118 insertions(+), 4 deletions(-)

diff --git a/hiviewdfx_lite/hilog_hal/src/dfx_hilog.c b/hiviewdfx_lite/hilog_hal/src/dfx_hilog.c
index d5925375..0d0e3c4d 100755
--- a/hiviewdfx_lite/hilog_hal/src/dfx_hilog.c
+++ b/hiviewdfx_lite/hilog_hal/src/dfx_hilog.c
@@ -13,7 +13,7 @@
  * limitations under the License.
  */
 
-
+#include <stdbool.h>
 #include <hiview_util.h>
 #include <securec.h>
 #include <hiview_config.h>
diff --git a/security_lite/huks/common/hks_test_file_operator.c b/security_lite/huks/common/hks_test_file_operator.c
index b2f8334d..66176917 100644
--- a/security_lite/huks/common/hks_test_file_operator.c
+++ b/security_lite/huks/common/hks_test_file_operator.c
@@ -27,9 +27,18 @@
 /* use product definitions temporarily */
 #define DEFAULT_FILE_PERMISSION 0666
 #else
+#ifndef _STORAGE_LITE_
+#include <dirent.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <limits.h>
+#include <stdint.h>
+#include <sys/stat.h>
+#include <unistd.h>
+#else
 
 #include <utils_file.h>
-
+#endif
 #endif /* _STORAGE_LITE_ */
 
 
@@ -198,6 +207,100 @@ int32_t HksIsFileExist(const char *path, const char *fileName)
     HksTestFree(fullFileName);
     return ret;
 }
+#else
+#ifndef _STORAGE_LITE_
+
+static int32_t IsFileExist(const char *fileName)
+{
+    if (access(fileName, F_OK) != 0) {
+        return HKS_ERROR_NOT_EXIST;
+    }
+
+    return HKS_SUCCESS;
+}
+
+
+static uint32_t FileSize(const char *fileName)
+{
+    HKS_TEST_LOG_E("fileName:%s",fileName);
+    if (IsFileExist(fileName) != HKS_SUCCESS) {
+        return 0;
+    }
+
+    struct stat fileStat;
+    (void)memset_s(&fileStat, sizeof(fileStat), 0, sizeof(fileStat));
+    if (stat(fileName, &fileStat) != 0) {
+        HKS_TEST_LOG_E("file stat fail.");
+        return 0;
+    }
+
+    return fileStat.st_size;
+}
+
+static uint32_t FileRead(const char *fileName, uint32_t offset, uint8_t *buf, uint32_t len)
+{
+    (void)offset;
+    if (IsFileExist(fileName) != HKS_SUCCESS) {
+        return 0;
+    }
+
+    char filePath[PATH_MAX + 1] = {0};
+    (void)realpath(fileName, filePath);
+    if (strstr(filePath, "../") != NULL) {
+        HKS_TEST_LOG_E("invalid filePath, path %s", filePath);
+        return 0;
+    }
+
+    FILE *fp = fopen(filePath, "rb");
+    if (fp == NULL) {
+        HKS_TEST_LOG_E("failed to open file");
+        return 0;
+    }
+
+    uint32_t size = fread(buf, 1, len, fp);
+    if (fclose(fp) < 0) {
+        HKS_TEST_LOG_E("failed to close file");
+        return 0;
+    }
+
+    return size;
+}
+
+static int32_t FileWrite(const char *fileName, uint32_t offset, const uint8_t *buf, uint32_t len)
+{
+    (void)offset;
+    char filePath[PATH_MAX + 1] = {0};
+    if (memcpy_s(filePath, sizeof(filePath) - 1, fileName, strlen(fileName)) != EOK) {
+        return HKS_ERROR_BAD_STATE;
+    }
+    (void)realpath(fileName, filePath);
+    if (strstr(filePath, "../") != NULL) {
+        HKS_TEST_LOG_E("invalid filePath, path %s", filePath);
+        return HKS_ERROR_INVALID_KEY_FILE;
+    }
+
+    /* caller function ensures that the folder exists */
+    FILE *fp = fopen(filePath, "wb+");
+    if (fp == NULL) {
+        HKS_TEST_LOG_E("open file fail");
+        return HKS_ERROR_OPEN_FILE_FAIL;
+    }
+
+    uint32_t size = fwrite(buf, 1, len, fp);
+    if (size != len) {
+        HKS_TEST_LOG_E("write file size fail.");
+        fclose(fp);
+        return HKS_ERROR_WRITE_FILE_FAIL;
+    }
+
+    if (fclose(fp) < 0) {
+        HKS_TEST_LOG_E("failed to close file");
+        return HKS_ERROR_CLOSE_FILE_FAIL;
+    }
+
+    return HKS_SUCCESS;
+}
+
 #else
 static uint32_t FileRead(const char *fileName, uint32_t offset, uint8_t *buf, uint32_t len)
 {
@@ -283,7 +386,7 @@ int32_t HksTestFileRemove(const char *path, const char *fileName)
 
     return UtilsFileDelete(fullFileName);
 }
-
+#endif
 #endif
 uint32_t HksTestFileRead(const char *path, const char *fileName, uint32_t offset, uint8_t *buf, uint32_t len)
 {
diff --git a/security_lite/huks/liteos_m_adapter/hks_safe_compare_key_test.c b/security_lite/huks/liteos_m_adapter/hks_safe_compare_key_test.c
index a68eafab..40a39301 100644
--- a/security_lite/huks/liteos_m_adapter/hks_safe_compare_key_test.c
+++ b/security_lite/huks/liteos_m_adapter/hks_safe_compare_key_test.c
@@ -30,7 +30,7 @@
 #include "cmsis_os2.h"
 #include "ohos_types.h"
 
-static const char *g_storePath = "/storage/";
+static const char *g_storePath = "/data/storage/";
 static const char *g_testOne = "TestOne";
 static const char *g_testTwo = "TestTwo";
 
diff --git a/utils_lite/kv_store_hal/BUILD.gn b/utils_lite/kv_store_hal/BUILD.gn
index e2f63672..0dbaaf55 100755
--- a/utils_lite/kv_store_hal/BUILD.gn
+++ b/utils_lite/kv_store_hal/BUILD.gn
@@ -13,6 +13,10 @@
 
 import("//test/xts/tools/lite/build/suite_lite.gni")
 
+declare_args() {
+  config_ohos_xts_acts_utils_lite_kv_store_data_path = ""
+}
+
 hctest_suite("ActsKvStoreTest") {
   suite_name = "acts"
   sources = [ "src/kvstore_func_test.c" ]
@@ -23,4 +27,6 @@ hctest_suite("ActsKvStoreTest") {
     "//base/iot_hardware/peripheral/interfaces/kits",
   ]
   cflags = [ "-Wno-error" ]
+  defines =
+      [ "DATA_PATH=\"${config_ohos_xts_acts_utils_lite_kv_store_data_path}\"" ]
 }
diff --git a/utils_lite/kv_store_hal/src/kvstore_func_test.c b/utils_lite/kv_store_hal/src/kvstore_func_test.c
index 8357e49d..ddc12040 100755
--- a/utils_lite/kv_store_hal/src/kvstore_func_test.c
+++ b/utils_lite/kv_store_hal/src/kvstore_func_test.c
@@ -27,6 +27,10 @@
 #define MAX_CACHE_NUM_TEST    10
 #define INVALID_KEY_NUM    128
 
+#ifndef DATA_PATH
+#define DATA_PATH "/data"
+#endif
+
 /**
  * @tc.desc      : register a test suite, this suite is used to test basic flow and interface dependency
  * @param        : subsystem name is utils
@@ -41,6 +45,7 @@ LITE_TEST_SUIT(utils, kvStore, KvStoreFuncTestSuite);
  */
 static BOOL KvStoreFuncTestSuiteSetUp(void)
 {
+    UtilsSetEnv(DATA_PATH);
     return TRUE;
 }
 
-- 
2.17.1

