From 483dac6a951f4a23fbc14b1ffe08753b82adaf20 Mon Sep 17 00:00:00 2001
From: SimonLi <likailong@huawei.com>
Date: Wed, 20 Oct 2021 01:08:05 +0800
Subject: [PATCH] build: porting musl to mini system

Signed-off-by: SimonLi <likailong@huawei.com>
Change-Id: Icb6746fd0a55d653d928bff7d888f87abd71cb98
---
 porting/liteos_m/kernel/BUILD.gn              | 25 +++---
 porting/liteos_m/kernel/include/ctype.h       | 12 +++
 porting/liteos_m/kernel/include/pthread.h     |  2 +-
 porting/liteos_m/kernel/include/stddef.h      | 13 ++++
 porting/liteos_m/kernel/include/stdlib.h      |  2 +
 .../liteos_m/kernel/src/internal/stdio_impl.h |  5 ++
 porting/liteos_m/kernel/src/misc/realpath.c   | 76 +++++++++++++++++++
 porting/liteos_m/kernel/src/stdio/clearerr.c  |  9 ++-
 porting/liteos_m/kernel/src/stdio/fclose.c    |  2 +-
 porting/liteos_m/kernel/src/stdio/feof.c      | 11 ++-
 porting/liteos_m/kernel/src/stdio/fflush.c    |  2 +-
 porting/liteos_m/kernel/src/stdio/fgets.c     |  4 +-
 porting/liteos_m/kernel/src/stdio/fileno.c    |  4 +-
 porting/liteos_m/kernel/src/stdio/fopen.c     |  9 ++-
 porting/liteos_m/kernel/src/stdio/fputs.c     |  9 ++-
 porting/liteos_m/kernel/src/stdio/fread.c     | 11 ++-
 porting/liteos_m/kernel/src/stdio/fseek.c     |  2 +-
 porting/liteos_m/kernel/src/stdio/ftell.c     |  2 +-
 porting/liteos_m/kernel/src/stdio/fwrite.c    |  9 ++-
 porting/liteos_m/kernel/src/string/strdup.c   |  7 +-
 20 files changed, 180 insertions(+), 36 deletions(-)
 mode change 100644 => 100755 porting/liteos_m/kernel/BUILD.gn
 mode change 100644 => 100755 porting/liteos_m/kernel/include/ctype.h
 mode change 100644 => 100755 porting/liteos_m/kernel/include/stddef.h
 mode change 100644 => 100755 porting/liteos_m/kernel/include/stdlib.h
 mode change 100644 => 100755 porting/liteos_m/kernel/src/internal/stdio_impl.h
 create mode 100755 porting/liteos_m/kernel/src/misc/realpath.c
 mode change 100644 => 100755 porting/liteos_m/kernel/src/stdio/clearerr.c
 mode change 100644 => 100755 porting/liteos_m/kernel/src/stdio/fclose.c
 mode change 100644 => 100755 porting/liteos_m/kernel/src/stdio/feof.c
 mode change 100644 => 100755 porting/liteos_m/kernel/src/stdio/fflush.c
 mode change 100644 => 100755 porting/liteos_m/kernel/src/stdio/fgets.c
 mode change 100644 => 100755 porting/liteos_m/kernel/src/stdio/fileno.c
 mode change 100644 => 100755 porting/liteos_m/kernel/src/stdio/fopen.c
 mode change 100644 => 100755 porting/liteos_m/kernel/src/stdio/fputs.c
 mode change 100644 => 100755 porting/liteos_m/kernel/src/stdio/fread.c
 mode change 100644 => 100755 porting/liteos_m/kernel/src/stdio/fseek.c
 mode change 100644 => 100755 porting/liteos_m/kernel/src/stdio/ftell.c
 mode change 100644 => 100755 porting/liteos_m/kernel/src/stdio/fwrite.c
 mode change 100644 => 100755 porting/liteos_m/kernel/src/string/strdup.c

diff --git a/porting/liteos_m/kernel/BUILD.gn b/porting/liteos_m/kernel/BUILD.gn
old mode 100644
new mode 100755
index b0cead99..25a40945
--- a/porting/liteos_m/kernel/BUILD.gn
+++ b/porting/liteos_m/kernel/BUILD.gn
@@ -58,10 +58,11 @@ static_library(libc) {
     "src/locale/c_locale.c",
     "src/locale/langinfo.c",
     "src/misc/dirname.c",
-    "src/multibyte/internal.c",
-    "src/multibyte/mbtowc.c",
-    "src/multibyte/wcrtomb.c",
-    "src/multibyte/wctomb.c",
+    "src/misc/realpath.c",
+    # "src/multibyte/internal.c",
+    # "src/multibyte/mbtowc.c",
+    # "src/multibyte/wcrtomb.c",
+    # "src/multibyte/wctomb.c",
     "src/network/h_errno.c",
     "src/network/htonl.c",
     "src/network/htons.c",
@@ -102,25 +103,25 @@ static_library(libc) {
     "src/stdio/perror.c",
     "src/stdio/remove.c",
     "src/stdio/rewind.c",
-    "src/stdio/snprintf.c",
+    # "src/stdio/snprintf.c",
     "src/stdio/stderr.c",
     "src/stdio/stdin.c",
     "src/stdio/stdout.c",
-    "src/stdio/vfprintf.c",
-    "src/stdio/vsnprintf.c",
-    "src/stdio/vsprintf.c",
+    # "src/stdio/vfprintf.c",
+    # "src/stdio/vsnprintf.c",
+    # "src/stdio/vsprintf.c",
     "src/stdlib/abs.c",
     "src/stdlib/atof.c",
     "src/stdlib/atoi.c",
 
-    #"src/stdlib/strtol.c",
+    # "src/stdlib/strtol.c",
     "src/locale/iconv.c",
-    "src/stdio/ungetc.c",
+    # "src/stdio/ungetc.c",
     "src/stdlib/atol.c",
     "src/stdlib/atoll.c",
     "src/stdlib/bsearch.c",
     "src/stdlib/llabs.c",
-    "src/stdlib/strtod.c",
+    # "src/stdlib/strtod.c",
     "src/string/memchr.c",
     "src/string/memcmp.c",
     "src/string/memcpy.c",
@@ -138,7 +139,7 @@ static_library(libc) {
     "src/string/strlen.c",
     "src/string/strncasecmp.c",
     "src/string/strncmp.c",
-    "src/string/strncpy.c",
+    # "src/string/strncpy.c",
     "src/string/strnlen.c",
     "src/string/strrchr.c",
     "src/string/strspn.c",
diff --git a/porting/liteos_m/kernel/include/ctype.h b/porting/liteos_m/kernel/include/ctype.h
old mode 100644
new mode 100755
index 61e826d0..05fe3b58
--- a/porting/liteos_m/kernel/include/ctype.h
+++ b/porting/liteos_m/kernel/include/ctype.h
@@ -66,6 +66,18 @@ int   toupper_l(int, locale_t);
 
 int   isascii(int);
 int   toascii(int);
+
+#ifndef _U
+#define	_U	01
+#define	_L	02
+#define	_N	04
+#define	_S	010
+#define _P	020
+#define _C	040
+#define _X	0100
+#define	_B	0200
+#endif
+
 #define _tolower(a) ((a)|0x20)
 #define _toupper(a) ((a)&0x5f)
 #define isascii(a) (0 ? isascii(a) : (unsigned)(a) < 128)
diff --git a/porting/liteos_m/kernel/include/pthread.h b/porting/liteos_m/kernel/include/pthread.h
index 8291cdef..cd68607b 100644
--- a/porting/liteos_m/kernel/include/pthread.h
+++ b/porting/liteos_m/kernel/include/pthread.h
@@ -62,7 +62,7 @@ extern "C" {
 #define PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP { _MUX_MAGIC, _MUX_INVALID_HANDLE }
 #endif
 #define PTHREAD_RWLOCK_INITIALIZER {{{0}}}
-#define PTHREAD_COND_INITIALIZER {{{0}}}
+#define PTHREAD_COND_INITIALIZER {0}
 #define PTHREAD_ONCE_INIT 0
 
 
diff --git a/porting/liteos_m/kernel/include/stddef.h b/porting/liteos_m/kernel/include/stddef.h
old mode 100644
new mode 100755
index 27b5a9ad..dbc7b64e
--- a/porting/liteos_m/kernel/include/stddef.h
+++ b/porting/liteos_m/kernel/include/stddef.h
@@ -17,9 +17,22 @@
 #if __STDC_VERSION__ >= 201112L || __cplusplus >= 201103L
 #define __NEED_max_align_t
 #endif
+#define __need_wint_t
 
 #include <bits/alltypes.h>
 
+#if defined (__need_wint_t)
+#ifndef _WINT_T
+#define _WINT_T
+
+#ifndef __WINT_TYPE__
+#define __WINT_TYPE__ unsigned int
+#endif
+typedef __WINT_TYPE__ wint_t;
+#endif
+#undef __need_wint_t
+#endif
+
 #if __GNUC__ > 3
 #define offsetof(type, member) __builtin_offsetof(type, member)
 #else
diff --git a/porting/liteos_m/kernel/include/stdlib.h b/porting/liteos_m/kernel/include/stdlib.h
old mode 100644
new mode 100755
index d292fb0a..e665d446
--- a/porting/liteos_m/kernel/include/stdlib.h
+++ b/porting/liteos_m/kernel/include/stdlib.h
@@ -63,6 +63,7 @@ int abs (int);
 long labs (long);
 long long llabs (long long);
 
+#ifndef __GNUC__
 typedef struct { int quot, rem; } div_t;
 typedef struct { long quot, rem; } ldiv_t;
 typedef struct { long long quot, rem; } lldiv_t;
@@ -70,6 +71,7 @@ typedef struct { long long quot, rem; } lldiv_t;
 div_t div (int, int);
 ldiv_t ldiv (long, long);
 lldiv_t lldiv (long long, long long);
+#endif
 
 int mblen (const char *, size_t);
 int mbtowc (wchar_t *__restrict, const char *__restrict, size_t);
diff --git a/porting/liteos_m/kernel/src/internal/stdio_impl.h b/porting/liteos_m/kernel/src/internal/stdio_impl.h
old mode 100644
new mode 100755
index fa94606a..d5f8598c
--- a/porting/liteos_m/kernel/src/internal/stdio_impl.h
+++ b/porting/liteos_m/kernel/src/internal/stdio_impl.h
@@ -6,6 +6,11 @@
 #include <stdio.h>
 #include <bits/alltypes.h>
 #include "../include/features.h"
+#ifdef __GNUC__
+#define WRAP(x) __wrap_##x
+#else
+#define WRAP(x) x
+#endif
 
 #define UNGET 8
 
diff --git a/porting/liteos_m/kernel/src/misc/realpath.c b/porting/liteos_m/kernel/src/misc/realpath.c
new file mode 100755
index 00000000..9c630cb6
--- /dev/null
+++ b/porting/liteos_m/kernel/src/misc/realpath.c
@@ -0,0 +1,76 @@
+/* realpath.c - Return the canonicalized absolute pathname */
+
+/* Written 2000 by Werner Almesberger */
+
+#include <stdlib.h>
+#include <unistd.h>
+#include <string.h>
+#include <limits.h>
+#include <errno.h>
+#include <sys/stat.h>
+
+/* FIXME: buffer overrun possible, loops forever on cyclic symlinks */
+
+/*
+ * Canonical name: never ends with a slash
+ */
+
+static int resolve_path(char *path, char *result, char *pos)
+{
+    if (*path == '/') {
+        *result = '/';
+        pos = result + 1;
+        path++;
+    }
+    *pos = 0;
+    if (!*path)
+        return 0;
+    while (1) {
+        char *slash;
+        struct stat st;
+
+        slash = *path ? strchr(path, '/') : NULL;
+        if (slash)
+            *slash = 0;
+        if (!path[0] || (path[0] == '.' &&
+                         (!path[1] || (path[1] == '.' && !path[2])))) {
+            pos--;
+            if (pos != result && path[0] && path[1])
+                while (*--pos != '/')
+                    ;
+        } else {
+            strcpy(pos, path);
+            if (stat(result, &st) < 0)
+                return -1;
+            // ignore link
+            pos = strchr(result, 0);
+        }
+        if (slash) {
+            *pos++ = '/';
+            path = slash + 1;
+        }
+        *pos = 0;
+        if (!slash)
+            break;
+    }
+    return 0;
+}
+
+char *realpath(const char *__restrict path, char *__restrict resolved_path)
+{
+    char *path_copy;
+    int res;
+
+    if (!*path) {
+        errno = ENOENT; /* SUSv2 */
+        return NULL;
+    }
+    path_copy = strdup(path);
+    if (!path_copy)
+        return NULL;
+    res = resolve_path(path_copy, resolved_path, resolved_path);
+    free(path_copy);
+    if (res)
+        return NULL;
+    return resolved_path;
+}
diff --git a/porting/liteos_m/kernel/src/stdio/clearerr.c b/porting/liteos_m/kernel/src/stdio/clearerr.c
old mode 100644
new mode 100755
index 3bf94d30..aaaaf83f
--- a/porting/liteos_m/kernel/src/stdio/clearerr.c
+++ b/porting/liteos_m/kernel/src/stdio/clearerr.c
@@ -1,10 +1,15 @@
 #include "stdio_impl.h"
 
-void clearerr(FILE *f)
+void __clearerr(FILE *f)
 {
 	FLOCK(f);
 	f->flags &= ~(F_EOF|F_ERR);
 	FUNLOCK(f);
 }
 
-weak_alias(clearerr, clearerr_unlocked);
+weak_alias(__clearerr, clearerr_unlocked);
+
+void WRAP(clearerr)(FILE *f)
+{
+	__clearerr(f);
+}
diff --git a/porting/liteos_m/kernel/src/stdio/fclose.c b/porting/liteos_m/kernel/src/stdio/fclose.c
old mode 100644
new mode 100755
index 9569c8ff..d6dfcadd
--- a/porting/liteos_m/kernel/src/stdio/fclose.c
+++ b/porting/liteos_m/kernel/src/stdio/fclose.c
@@ -38,7 +38,7 @@ int __fclose(FILE *f)
 }
 weak_alias(__fclose, fclose);
 
-int __wrap_fclose(FILE *f)
+int WRAP(fclose)(FILE *f)
 {
     return __fclose(f);
 }
diff --git a/porting/liteos_m/kernel/src/stdio/feof.c b/porting/liteos_m/kernel/src/stdio/feof.c
old mode 100644
new mode 100755
index 56da6b91..fafaeb15
--- a/porting/liteos_m/kernel/src/stdio/feof.c
+++ b/porting/liteos_m/kernel/src/stdio/feof.c
@@ -2,7 +2,7 @@
 
 #undef feof
 
-int feof(FILE *f)
+int __feof(FILE *f)
 {
 	FLOCK(f);
 	int ret = !!(f->flags & F_EOF);
@@ -10,5 +10,10 @@ int feof(FILE *f)
 	return ret;
 }
 
-weak_alias(feof, feof_unlocked);
-weak_alias(feof, _IO_feof_unlocked);
+weak_alias(__feof, feof_unlocked);
+weak_alias(__feof, _IO_feof_unlocked);
+
+int WRAP(feof)(FILE *f)
+{
+	return __feof(f);
+}
diff --git a/porting/liteos_m/kernel/src/stdio/fflush.c b/porting/liteos_m/kernel/src/stdio/fflush.c
old mode 100644
new mode 100755
index f2164eec..71999bc0
--- a/porting/liteos_m/kernel/src/stdio/fflush.c
+++ b/porting/liteos_m/kernel/src/stdio/fflush.c
@@ -47,7 +47,7 @@ int __fflush(FILE *f)
 weak_alias(fflush, fflush_unlocked);
 weak_alias(__fflush, fflush);
 
-int __wrap_fflush(FILE *f)
+int WRAP(fflush)(FILE *f)
 {
     return __fflush(f);
 }
diff --git a/porting/liteos_m/kernel/src/stdio/fgets.c b/porting/liteos_m/kernel/src/stdio/fgets.c
old mode 100644
new mode 100755
index d1109e75..26ef2b27
--- a/porting/liteos_m/kernel/src/stdio/fgets.c
+++ b/porting/liteos_m/kernel/src/stdio/fgets.c
@@ -3,7 +3,7 @@
 
 #define MIN(a,b) ((a)<(b) ? (a) : (b))
 
-char *fgets(char *restrict s, int n, FILE *restrict f)
+char *WRAP(fgets)(char *restrict s, int n, FILE *restrict f)
 {
 	char *p = s;
 	unsigned char *z;
@@ -43,4 +43,4 @@ char *fgets(char *restrict s, int n, FILE *restrict f)
 	FUNLOCK(f);
 
 	return s;
-}
\ No newline at end of file
+}
diff --git a/porting/liteos_m/kernel/src/stdio/fileno.c b/porting/liteos_m/kernel/src/stdio/fileno.c
old mode 100644
new mode 100755
index e6e66908..5dee4215
--- a/porting/liteos_m/kernel/src/stdio/fileno.c
+++ b/porting/liteos_m/kernel/src/stdio/fileno.c
@@ -1,7 +1,7 @@
 #include "stdio_impl.h"
 #include <errno.h>
 
-int fileno(FILE *f)
+int WRAP(fileno)(FILE *f)
 {
 	FLOCK(f);
 	int fd = f->fd;
@@ -11,4 +11,4 @@ int fileno(FILE *f)
 		return -1;
 	}
 	return fd;
-}
\ No newline at end of file
+}
diff --git a/porting/liteos_m/kernel/src/stdio/fopen.c b/porting/liteos_m/kernel/src/stdio/fopen.c
old mode 100644
new mode 100755
index 7dddf930..ebd89547
--- a/porting/liteos_m/kernel/src/stdio/fopen.c
+++ b/porting/liteos_m/kernel/src/stdio/fopen.c
@@ -5,7 +5,7 @@
 #include <errno.h>
 #include <limits.h>
 
-FILE *fopen(const char *restrict filename, const char *restrict mode)
+FILE *__fopen(const char *restrict filename, const char *restrict mode)
 {
 	FILE *f;
 	int fd;
@@ -39,4 +39,9 @@ FILE *fopen(const char *restrict filename, const char *restrict mode)
 	return 0;
 }
 
-weak_alias(fopen, fopen64);
+weak_alias(__fopen, fopen64);
+
+FILE *WRAP(fopen)(const char *restrict filename, const char *restrict mode)
+{
+	return __fopen(filename, mode);
+}
diff --git a/porting/liteos_m/kernel/src/stdio/fputs.c b/porting/liteos_m/kernel/src/stdio/fputs.c
old mode 100644
new mode 100755
index 1cf344f2..50b6efd4
--- a/porting/liteos_m/kernel/src/stdio/fputs.c
+++ b/porting/liteos_m/kernel/src/stdio/fputs.c
@@ -1,10 +1,15 @@
 #include "stdio_impl.h"
 #include <string.h>
 
-int fputs(const char *restrict s, FILE *restrict f)
+int __fputs(const char *restrict s, FILE *restrict f)
 {
 	size_t l = strlen(s);
 	return (fwrite(s, 1, l, f)==l) - 1;
 }
 
-weak_alias(fputs, fputs_unlocked);
+weak_alias(__fputs, fputs_unlocked);
+
+int WRAP(fputs)(const char *restrict s, FILE *restrict f)
+{
+	return __fputs(s, f);
+}
diff --git a/porting/liteos_m/kernel/src/stdio/fread.c b/porting/liteos_m/kernel/src/stdio/fread.c
old mode 100644
new mode 100755
index a2116da6..858931a0
--- a/porting/liteos_m/kernel/src/stdio/fread.c
+++ b/porting/liteos_m/kernel/src/stdio/fread.c
@@ -3,12 +3,12 @@
 
 #define MIN(a,b) ((a)<(b) ? (a) : (b))
 
-size_t fread(void *restrict destv, size_t size, size_t nmemb, FILE *restrict f)
+size_t __fread(void *restrict destv, size_t size, size_t nmemb, FILE *restrict f)
 {
 	unsigned char *dest = destv;
 	size_t len = size*nmemb, l = len, k;
 	if (!size) nmemb = 0;
-
+	if (!nmemb) return 0;
 	FLOCK(f);
 
 	f->mode |= f->mode-1;
@@ -35,4 +35,9 @@ size_t fread(void *restrict destv, size_t size, size_t nmemb, FILE *restrict f)
 	return nmemb;
 }
 
-weak_alias(fread, fread_unlocked);
+weak_alias(__fread, fread_unlocked);
+
+size_t WRAP(fread)(void *restrict destv, size_t size, size_t nmemb, FILE *restrict f)
+{
+	return __fread(destv, size, nmemb, f);
+}
diff --git a/porting/liteos_m/kernel/src/stdio/fseek.c b/porting/liteos_m/kernel/src/stdio/fseek.c
old mode 100644
new mode 100755
index 4731d8a0..0f10c2f6
--- a/porting/liteos_m/kernel/src/stdio/fseek.c
+++ b/porting/liteos_m/kernel/src/stdio/fseek.c
@@ -33,7 +33,7 @@ int __fseeko(FILE *f, off_t off, int whence)
 	return result;
 }
 
-int fseek(FILE *f, long off, int whence)
+int WRAP(fseek)(FILE *f, long off, int whence)
 {
 	return __fseeko(f, off, whence);
 }
diff --git a/porting/liteos_m/kernel/src/stdio/ftell.c b/porting/liteos_m/kernel/src/stdio/ftell.c
old mode 100644
new mode 100755
index d15cc665..d899dcfd
--- a/porting/liteos_m/kernel/src/stdio/ftell.c
+++ b/porting/liteos_m/kernel/src/stdio/ftell.c
@@ -26,7 +26,7 @@ off_t __ftello(FILE *f)
 	return pos;
 }
 
-long ftell(FILE *f)
+long WRAP(ftell)(FILE *f)
 {
 	off_t pos = __ftello(f);
 	if (pos > LONG_MAX) {
diff --git a/porting/liteos_m/kernel/src/stdio/fwrite.c b/porting/liteos_m/kernel/src/stdio/fwrite.c
old mode 100644
new mode 100755
index 7a567b2c..5e3fb264
--- a/porting/liteos_m/kernel/src/stdio/fwrite.c
+++ b/porting/liteos_m/kernel/src/stdio/fwrite.c
@@ -25,7 +25,7 @@ size_t __fwritex(const unsigned char *restrict s, size_t l, FILE *restrict f)
 	return l+i;
 }
 
-size_t fwrite(const void *restrict src, size_t size, size_t nmemb, FILE *restrict f)
+size_t __fwrite(const void *restrict src, size_t size, size_t nmemb, FILE *restrict f)
 {
 	size_t k, l = size*nmemb;
 	if (!size) nmemb = 0;
@@ -35,4 +35,9 @@ size_t fwrite(const void *restrict src, size_t size, size_t nmemb, FILE *restric
 	return k==l ? nmemb : k/size;
 }
 
-weak_alias(fwrite, fwrite_unlocked);
+weak_alias(__fwrite, fwrite_unlocked);
+
+size_t WRAP(fwrite)(const void *restrict src, size_t size, size_t nmemb, FILE *restrict f)
+{
+	return __fwrite(src, size, nmemb, f);
+}
diff --git a/porting/liteos_m/kernel/src/string/strdup.c b/porting/liteos_m/kernel/src/string/strdup.c
old mode 100644
new mode 100755
index d4c27449..68682c8a
--- a/porting/liteos_m/kernel/src/string/strdup.c
+++ b/porting/liteos_m/kernel/src/string/strdup.c
@@ -1,7 +1,12 @@
 #include <stdlib.h>
 #include <string.h>
 
-char *strdup(const char *s)
+#ifdef __GNUC__
+#define WRAP(x) __wrap_##x
+#else
+#define WRAP(x) x
+#endif
+char *WRAP(strdup)(const char *s)
 {
 	size_t l = strlen(s);
 	char *d = malloc(l+1);
-- 
2.17.1

