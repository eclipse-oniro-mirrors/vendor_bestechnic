From c54b151a3f1e61ab0f91b882e0e51b8bcabbac55 Mon Sep 17 00:00:00 2001
From: SimonLi <likailong@huawei.com>
Date: Mon, 15 Nov 2021 17:02:54 +0800
Subject: [PATCH] kernel liteos_m

Change-Id: I403f69cbb76225672988ffe59853f1255bfa9a8b
---
 BUILD.gn                         | 78 ++++++++++++++++----------------
 components/fs/fs.c               | 46 +++++++++++--------
 components/fs/littlefs/lfs_api.c | 31 +++++++++++++
 components/fs/littlefs/lfs_api.h |  2 +
 kal/posix/src/time.c             |  2 +-
 5 files changed, 99 insertions(+), 60 deletions(-)
 mode change 100644 => 100755 components/fs/fs.c
 mode change 100644 => 100755 components/fs/littlefs/lfs_api.c
 mode change 100644 => 100755 components/fs/littlefs/lfs_api.h

diff --git a/BUILD.gn b/BUILD.gn
index 1841ea9..2684976 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -278,42 +278,42 @@ group("kernel") {
 group("liteos_m") {
 }
 
-executable("liteos") {
-  configs += [
-    ":public",
-    ":los_config",
-  ]
-
-  ldflags = [
-    "-static",
-    "-Wl,--gc-sections",
-    "-Wl,-Map=$liteos_name.map",
-  ]
-
-  output_dir = target_out_dir
-
-  if (liteos_kernel_only) {
-    deps = [ ":kernel" ]
-  } else {
-    deps = [ "//build/lite:ohos" ]
-  }
-}
-
-copy("copy_liteos") {
-  deps = [ ":liteos" ]
-  sources = [ "$target_out_dir/unstripped/bin/liteos" ]
-  outputs = [ "$root_out_dir/$liteos_name" ]
-}
-
-build_ext_component("build_kernel_image") {
-  deps = [ ":copy_liteos" ]
-  exec_path = rebase_path(root_out_dir)
-
-  objcopy = "${compile_prefix}objcopy$toolchain_cmd_suffix"
-  objdump = "${compile_prefix}objdump$toolchain_cmd_suffix"
-
-  command = "$objcopy -O binary $liteos_name $liteos_name.bin"
-  command +=
-      " && sh -c '$objdump -t $liteos_name | sort >$liteos_name.sym.sorted'"
-  command += " && sh -c '$objdump -d $liteos_name >$liteos_name.asm'"
-}
+# executable("liteos") {
+#   configs += [
+#     ":public",
+#     ":los_config",
+#   ]
+# 
+#   ldflags = [
+#     "-static",
+#     "-Wl,--gc-sections",
+#     "-Wl,-Map=$liteos_name.map",
+#   ]
+# 
+#   output_dir = target_out_dir
+# 
+#   if (liteos_kernel_only) {
+#     deps = [ ":kernel" ]
+#   } else {
+#     deps = [ "//build/lite:ohos" ]
+#   }
+# }
+# 
+# copy("copy_liteos") {
+#   deps = [ ":liteos" ]
+#   sources = [ "$target_out_dir/unstripped/bin/liteos" ]
+#   outputs = [ "$root_out_dir/$liteos_name" ]
+# }
+# 
+# build_ext_component("build_kernel_image") {
+#   deps = [ ":copy_liteos" ]
+#   exec_path = rebase_path(root_out_dir)
+# 
+#   objcopy = "${compile_prefix}objcopy$toolchain_cmd_suffix"
+#   objdump = "${compile_prefix}objdump$toolchain_cmd_suffix"
+# 
+#   command = "$objcopy -O binary $liteos_name $liteos_name.bin"
+#   command +=
+#       " && sh -c '$objdump -t $liteos_name | sort >$liteos_name.sym.sorted'"
+#   command += " && sh -c '$objdump -d $liteos_name >$liteos_name.asm'"
+# }
diff --git a/components/fs/fs.c b/components/fs/fs.c
old mode 100644
new mode 100755
index b28f2ee..ab01df1
--- a/components/fs/fs.c
+++ b/components/fs/fs.c
@@ -45,6 +45,12 @@
 #include "sys/stat.h"
 #include "unistd.h"
 
+#ifdef __GNUC__
+#define WRAP(x) __wrap_##x
+#else
+#define WRAP(x) x
+#endif
+
 #ifdef LOSCFG_NET_LWIP_SACK
 #define _BSD_SOURCE
 #include "lwip/sockets.h"
@@ -188,7 +194,7 @@ static struct FsMap *MountFindfs(const char *fileSystemtype)
     return NULL;
 }
 
-int mount(const char *source, const char *target,
+int WRAP(mount)(const char *source, const char *target,
           const char *filesystemtype, unsigned long mountflags,
           const void *data)
 {
@@ -213,7 +219,7 @@ int mount(const char *source, const char *target,
     return g_fs->fsMops->Mount(source, target, filesystemtype, mountflags, data);
 }
 
-int umount(const char *target)
+int WRAP(umount)(const char *target)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -226,7 +232,7 @@ int umount(const char *target)
     return g_fs->fsMops->Umount(target);
 }
 
-int umount2(const char *target, int flag)
+int WRAP(umount2)(const char *target, int flag)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -239,7 +245,7 @@ int umount2(const char *target, int flag)
     return g_fs->fsMops->Umount2(target, flag);
 }
 
-int open(const char *path, int oflag, ...)
+int WRAP(open)(const char *path, int oflag, ...)
 {
 #ifdef LOSCFG_RANDOM_DEV
     unsigned flags = O_RDONLY | O_WRONLY | O_RDWR | O_APPEND | O_CREAT | O_LARGEFILE | O_TRUNC | O_EXCL | O_DIRECTORY;
@@ -294,7 +300,7 @@ int open(const char *path, int oflag, ...)
     return g_fs->fsFops->Open(path, oflag);
 }
 
-int close(int fd)
+int WRAP(close)(int fd)
 {
 #ifdef LOSCFG_RANDOM_DEV
     if (fd == RANDOM_DEV_FD) {
@@ -317,7 +323,7 @@ int close(int fd)
     return g_fs->fsFops->Close(fd);
 }
 
-ssize_t read(int fd, void *buf, size_t nbyte)
+ssize_t WRAP(read)(int fd, void *buf, size_t nbyte)
 {
 #ifdef LOSCFG_RANDOM_DEV
     if (fd == RANDOM_DEV_FD) {
@@ -355,7 +361,7 @@ ssize_t read(int fd, void *buf, size_t nbyte)
     return g_fs->fsFops->Read(fd, buf, nbyte);
 }
 
-ssize_t write(int fd, const void *buf, size_t nbyte)
+ssize_t WRAP(write)(int fd, const void *buf, size_t nbyte)
 {
 #ifdef LOSCFG_RANDOM_DEV
     if (fd == RANDOM_DEV_FD) {
@@ -379,7 +385,7 @@ ssize_t write(int fd, const void *buf, size_t nbyte)
     return g_fs->fsFops->Write(fd, buf, nbyte);
 }
 
-off_t lseek(int fd, off_t offset, int whence)
+off_t WRAP(lseek)(int fd, off_t offset, int whence)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -392,7 +398,7 @@ off_t lseek(int fd, off_t offset, int whence)
     return g_fs->fsFops->Seek(fd, offset, whence);
 }
 
-int unlink(const char *path)
+int WRAP(unlink)(const char *path)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -405,7 +411,7 @@ int unlink(const char *path)
     return g_fs->fsFops->Unlink(path);
 }
 
-int fstat(int fd, struct stat *buf)
+int WRAP(fstat)(int fd, struct stat *buf)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -418,7 +424,7 @@ int fstat(int fd, struct stat *buf)
     return g_fs->fsFops->Fstat(fd, buf);
 }
 
-int stat(const char *path, struct stat *buf)
+int WRAP(stat)(const char *path, struct stat *buf)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -431,7 +437,7 @@ int stat(const char *path, struct stat *buf)
     return g_fs->fsFops->Getattr(path, buf);
 }
 
-int fsync(int fd)
+int WRAP(fsync)(int fd)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -444,7 +450,7 @@ int fsync(int fd)
     return g_fs->fsFops->Fsync(fd);
 }
 
-int mkdir(const char *path, mode_t mode)
+int WRAP(mkdir)(const char *path, mode_t mode)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -457,7 +463,7 @@ int mkdir(const char *path, mode_t mode)
     return g_fs->fsFops->Mkdir(path, mode);
 }
 
-DIR *opendir(const char *dirName)
+DIR *WRAP(opendir)(const char *dirName)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -470,7 +476,7 @@ DIR *opendir(const char *dirName)
     return g_fs->fsFops->Opendir(dirName);
 }
 
-struct dirent *readdir(DIR *dir)
+struct dirent *WRAP(readdir)(DIR *dir)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -483,7 +489,7 @@ struct dirent *readdir(DIR *dir)
     return g_fs->fsFops->Readdir(dir);
 }
 
-int closedir(DIR *dir)
+int WRAP(closedir)(DIR *dir)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -496,7 +502,7 @@ int closedir(DIR *dir)
     return g_fs->fsFops->Closedir(dir);
 }
 
-int rmdir(const char *path)
+int WRAP(rmdir)(const char *path)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -509,7 +515,7 @@ int rmdir(const char *path)
     return g_fs->fsFops->Rmdir(path);
 }
 
-int rename(const char *oldName, const char *newName)
+int WRAP(rename)(const char *oldName, const char *newName)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -522,7 +528,7 @@ int rename(const char *oldName, const char *newName)
     return g_fs->fsFops->Rename(oldName, newName);
 }
 
-int statfs(const char *path, struct statfs *buf)
+int WRAP(statfs)(const char *path, struct statfs *buf)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -535,7 +541,7 @@ int statfs(const char *path, struct statfs *buf)
     return g_fs->fsMops->Statfs(path, buf);
 }
 
-int ftruncate(int fd, off_t length)
+int WRAP(ftruncate)(int fd, off_t length)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
diff --git a/components/fs/littlefs/lfs_api.c b/components/fs/littlefs/lfs_api.c
old mode 100644
new mode 100755
index 67a2db9..043ffc0
--- a/components/fs/littlefs/lfs_api.c
+++ b/components/fs/littlefs/lfs_api.c
@@ -322,6 +322,7 @@ const struct FileOps g_lfsFops = {
     .Rename = LfsRename,
     .Getattr = LfsStat,
     .Fsync = LfsFsync,
+    .Fstat = LfsFstat,
 };
 
 int LfsMount(const char *source, const char *target, const char *fileSystemType, unsigned long mountflags,
@@ -772,3 +773,33 @@ int LfsFsync(int fd)
     }
     return ret;
 }
+
+int LfsFstat(int fd, struct stat *buf)
+{
+    int ret;
+    struct lfs_info info;
+
+    if (buf == NULL) {
+        errno = EFAULT;
+        return FS_FAILURE;
+    }
+
+    if (LfsFdIsValid(fd) == FALSE) {
+        errno = EBADF;
+        return VFS_ERROR;
+    }
+
+    ret = lfs_stat(g_handle[fd].lfsHandle, g_handle[fd].pathName, &info);
+    if (ret == 0) {
+        buf->st_size = info.size;
+        if (info.type == LFS_TYPE_REG) {
+            buf->st_mode = S_IFREG;
+        } else {
+            buf->st_mode = S_IFDIR;
+        }
+    } else {
+        errno = LittlefsErrno(ret);
+        ret = VFS_ERROR;
+    }
+    return ret;
+}
\ No newline at end of file
diff --git a/components/fs/littlefs/lfs_api.h b/components/fs/littlefs/lfs_api.h
old mode 100644
new mode 100755
index 8aa8606..3839f75
--- a/components/fs/littlefs/lfs_api.h
+++ b/components/fs/littlefs/lfs_api.h
@@ -111,6 +111,8 @@ int LfsClose(int fd);
 int LfsRename(const char *oldName, const char *newName);
 int LfsStat(const char *path, struct stat *buf);
 int LfsFsync(int fd);
+int LfsFstat(int fd, struct stat *buf);
+
 int SetDefaultMountPath(int pathNameIndex, const char* target);
 
 #endif /* _LFS_API_H_ */
diff --git a/kal/posix/src/time.c b/kal/posix/src/time.c
index 0f54fca..2c1caed 100644
--- a/kal/posix/src/time.c
+++ b/kal/posix/src/time.c
@@ -589,7 +589,7 @@ time_t mktime(struct tm *tmptr)
     return timeInSeconds;
 }
 
-int gettimeofday(struct timeval *tv, void *ptz)
+__attribute__((weak)) int gettimeofday(struct timeval *tv, void *ptz)
 {
     struct timespec ts;
     struct timezone *tz = (struct timezone *)ptz;
-- 
2.17.1

