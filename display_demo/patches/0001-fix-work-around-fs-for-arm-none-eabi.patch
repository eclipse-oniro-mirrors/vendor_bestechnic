From 31b70305bad93ce26b0da592d7db4ca988a6f1bc Mon Sep 17 00:00:00 2001
From: leihuang <leihuang@bestechnic.com>
Date: Wed, 3 Nov 2021 19:41:12 +0800
Subject: [PATCH] fix: work around fs for arm-none-eabi

Signed-off-by: leihuang <leihuang@bestechnic.com>
Change-Id: I7d21de668c7a3f849f032190dfc46c9e64576c96
---
 components/fs/fs.c               | 46 +++++++++++++++++---------------
 components/fs/littlefs/lfs_api.c | 31 +++++++++++++++++++++
 components/fs/littlefs/lfs_api.h |  2 ++
 kal/posix/src/time.c             |  2 +-
 4 files changed, 59 insertions(+), 22 deletions(-)
 mode change 100644 => 100755 components/fs/fs.c
 mode change 100644 => 100755 components/fs/littlefs/lfs_api.c
 mode change 100644 => 100755 components/fs/littlefs/lfs_api.h

diff --git a/components/fs/fs.c b/components/fs/fs.c
old mode 100644
new mode 100755
index 636667f..b9da5d9
--- a/components/fs/fs.c
+++ b/components/fs/fs.c
@@ -44,7 +44,11 @@
 #include "sys/statfs.h"
 #include "sys/stat.h"
 #include "unistd.h"
-
+#ifdef __GNUC__
+#define WRAP(x) __wrap_##x
+#else
+#define WRAP(x) x
+#endif
 struct FsMap g_fsmap[MAX_FILESYSTEM_LEN] = {0};
 struct FsMap *g_fs = NULL;
 
@@ -191,7 +195,7 @@ static struct FsMap *MountFindfs(const char *fileSystemtype)
     return NULL;
 }
 
-int mount(const char *source, const char *target,
+int WRAP(mount)(const char *source, const char *target,
           const char *filesystemtype, unsigned long mountflags,
           const void *data)
 {
@@ -216,7 +220,7 @@ int mount(const char *source, const char *target,
     return g_fs->fsMops->Mount(source, target, filesystemtype, mountflags, data);
 }
 
-int umount(const char *target)
+int WRAP(umount)(const char *target)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -229,7 +233,7 @@ int umount(const char *target)
     return g_fs->fsMops->Umount(target);
 }
 
-int umount2(const char *target, int flag)
+int WRAP(umount2)(const char *target, int flag)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -242,7 +246,7 @@ int umount2(const char *target, int flag)
     return g_fs->fsMops->Umount2(target, flag);
 }
 
-int open(const char *path, int oflag, ...)
+int WRAP(open)(const char *path, int oflag, ...)
 {
 #ifdef LOSCFG_RANDOM_DEV
     unsigned flags = O_RDONLY | O_WRONLY | O_RDWR | O_APPEND | O_CREAT | O_LARGEFILE | O_TRUNC | O_EXCL | O_DIRECTORY;
@@ -297,7 +301,7 @@ int open(const char *path, int oflag, ...)
     return g_fs->fsFops->Open(path, oflag);
 }
 
-int close(int fd)
+int WRAP(close)(int fd)
 {
 #ifdef LOSCFG_RANDOM_DEV
     if (fd == RANDOM_DEV_FD) {
@@ -320,7 +324,7 @@ int close(int fd)
     return g_fs->fsFops->Close(fd);
 }
 
-ssize_t read(int fd, void *buf, size_t nbyte)
+ssize_t WRAP(read)(int fd, void *buf, size_t nbyte)
 {
 #ifdef LOSCFG_RANDOM_DEV
     if (fd == RANDOM_DEV_FD) {
@@ -358,7 +362,7 @@ ssize_t read(int fd, void *buf, size_t nbyte)
     return g_fs->fsFops->Read(fd, buf, nbyte);
 }
 
-ssize_t write(int fd, const void *buf, size_t nbyte)
+ssize_t WRAP(write)(int fd, const void *buf, size_t nbyte)
 {
 #ifdef LOSCFG_RANDOM_DEV
     if (fd == RANDOM_DEV_FD) {
@@ -382,7 +386,7 @@ ssize_t write(int fd, const void *buf, size_t nbyte)
     return g_fs->fsFops->Write(fd, buf, nbyte);
 }
 
-off_t lseek(int fd, off_t offset, int whence)
+off_t WRAP(lseek)(int fd, off_t offset, int whence)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -395,7 +399,7 @@ off_t lseek(int fd, off_t offset, int whence)
     return g_fs->fsFops->Seek(fd, offset, whence);
 }
 
-int unlink(const char *path)
+int WRAP(unlink)(const char *path)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -408,7 +412,7 @@ int unlink(const char *path)
     return g_fs->fsFops->Unlink(path);
 }
 
-int fstat(int fd, struct stat *buf)
+int WRAP(fstat)(int fd, struct stat *buf)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -421,7 +425,7 @@ int fstat(int fd, struct stat *buf)
     return g_fs->fsFops->Fstat(fd, buf);
 }
 
-int stat(const char *path, struct stat *buf)
+int WRAP(stat)(const char *path, struct stat *buf)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -434,7 +438,7 @@ int stat(const char *path, struct stat *buf)
     return g_fs->fsFops->Getattr(path, buf);
 }
 
-int fsync(int fd)
+int WRAP(fsync)(int fd)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -447,7 +451,7 @@ int fsync(int fd)
     return g_fs->fsFops->Fsync(fd);
 }
 
-int mkdir(const char *path, mode_t mode)
+int WRAP(mkdir)(const char *path, mode_t mode)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -460,7 +464,7 @@ int mkdir(const char *path, mode_t mode)
     return g_fs->fsFops->Mkdir(path, mode);
 }
 
-DIR *opendir(const char *dirName)
+DIR *WRAP(opendir)(const char *dirName)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -473,7 +477,7 @@ DIR *opendir(const char *dirName)
     return g_fs->fsFops->Opendir(dirName);
 }
 
-struct dirent *readdir(DIR *dir)
+struct dirent *WRAP(readdir)(DIR *dir)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -486,7 +490,7 @@ struct dirent *readdir(DIR *dir)
     return g_fs->fsFops->Readdir(dir);
 }
 
-int closedir(DIR *dir)
+int WRAP(closedir)(DIR *dir)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -499,7 +503,7 @@ int closedir(DIR *dir)
     return g_fs->fsFops->Closedir(dir);
 }
 
-int rmdir(const char *path)
+int WRAP(rmdir)(const char *path)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -512,7 +516,7 @@ int rmdir(const char *path)
     return g_fs->fsFops->Rmdir(path);
 }
 
-int rename(const char *oldName, const char *newName)
+int WRAP(rename)(const char *oldName, const char *newName)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -525,7 +529,7 @@ int rename(const char *oldName, const char *newName)
     return g_fs->fsFops->Rename(oldName, newName);
 }
 
-int statfs(const char *path, struct statfs *buf)
+int WRAP(statfs)(const char *path, struct statfs *buf)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
@@ -538,7 +542,7 @@ int statfs(const char *path, struct statfs *buf)
     return g_fs->fsMops->Statfs(path, buf);
 }
 
-int ftruncate(int fd, off_t length)
+int WRAP(ftruncate)(int fd, off_t length)
 {
     if (g_fs == NULL) {
         errno = ENODEV;
diff --git a/components/fs/littlefs/lfs_api.c b/components/fs/littlefs/lfs_api.c
old mode 100644
new mode 100755
index 67a2db9..043ffc0
--- a/components/fs/littlefs/lfs_api.c
+++ b/components/fs/littlefs/lfs_api.c
@@ -322,6 +322,7 @@ const struct FileOps g_lfsFops = {
     .Rename = LfsRename,
     .Getattr = LfsStat,
     .Fsync = LfsFsync,
+    .Fstat = LfsFstat,
 };
 
 int LfsMount(const char *source, const char *target, const char *fileSystemType, unsigned long mountflags,
@@ -772,3 +773,33 @@ int LfsFsync(int fd)
     }
     return ret;
 }
+
+int LfsFstat(int fd, struct stat *buf)
+{
+    int ret;
+    struct lfs_info info;
+
+    if (buf == NULL) {
+        errno = EFAULT;
+        return FS_FAILURE;
+    }
+
+    if (LfsFdIsValid(fd) == FALSE) {
+        errno = EBADF;
+        return VFS_ERROR;
+    }
+
+    ret = lfs_stat(g_handle[fd].lfsHandle, g_handle[fd].pathName, &info);
+    if (ret == 0) {
+        buf->st_size = info.size;
+        if (info.type == LFS_TYPE_REG) {
+            buf->st_mode = S_IFREG;
+        } else {
+            buf->st_mode = S_IFDIR;
+        }
+    } else {
+        errno = LittlefsErrno(ret);
+        ret = VFS_ERROR;
+    }
+    return ret;
+}
\ No newline at end of file
diff --git a/components/fs/littlefs/lfs_api.h b/components/fs/littlefs/lfs_api.h
old mode 100644
new mode 100755
index 9d0ccbf..369fd65
--- a/components/fs/littlefs/lfs_api.h
+++ b/components/fs/littlefs/lfs_api.h
@@ -112,6 +112,8 @@ int LfsClose(int fd);
 int LfsRename(const char *oldName, const char *newName);
 int LfsStat(const char *path, struct stat *buf);
 int LfsFsync(int fd);
+int LfsFstat(int fd, struct stat *buf);
+
 int SetDefaultMountPath(int pathNameIndex, const char* target);
 
 const struct FsMap *MountFindfs(const char *filesystemtype);
diff --git a/kal/posix/src/time.c b/kal/posix/src/time.c
index 0f54fca..2c1caed 100644
--- a/kal/posix/src/time.c
+++ b/kal/posix/src/time.c
@@ -589,7 +589,7 @@ time_t mktime(struct tm *tmptr)
     return timeInSeconds;
 }
 
-int gettimeofday(struct timeval *tv, void *ptz)
+__attribute__((weak)) int gettimeofday(struct timeval *tv, void *ptz)
 {
     struct timespec ts;
     struct timezone *tz = (struct timezone *)ptz;
-- 
2.17.1

